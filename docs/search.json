{
  "articles": [
    {
      "path": "1-Porque_CPP.html",
      "title": "Por que C++? R não é suficiente?",
      "description": "Mostrar os Benefícios de C++ e quando usá-lo no seu código R\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nLinguagens Dinâmicas vs Estáticas\nO quão lento R é comparado à C++?\nExemplo - Simples Função de Soma\nExemplo - Amostrador de Gibbs\n\nSobrevoo de C++\nHistória do C++\nTipos de Variáveis – R vs C++\nO qualificador – const\nReferências – &\nFunções em C++\n\nLoops for em C++\nLoops while em C++\nDesvios condicionais if, else if e else em C++\nCasos condicionais switch\nQuando usar C++ no seu código R?\nO que mais existe em C++?\nAmbiente\n\n\n\nLinguagens Dinâmicas vs Estáticas1\nGeralmente as linguagens de programação são categorizadas entre linguagens dinamicamente tipadas ou estaticamente tipadas.\nO R é uma linguagem dinamicamente tipada. Isso quer dizer que os tipos das variáveis e dados não são declarados no código e, portanto, conhecidos/checados somente em tempo de execução. Além do R, Ruby, Python e Clojure também são exemplos de linguagens dinamicamente tipadas. A principal vantagem de uma linguagem dinamicamente tipada é a sua agilidade: você se torna mais produtivo e o código mais enxuto, mas isto vem com um custo. A principal desvantagem é que linguagems dinamicamente tipadas são bem mais lentas em tempo de execução.\nO C++ é uma linguagem estaticamente tipada. Isso quer dizer que os tipos das variáveis e dos dados são explicitamente definidos no código e, portanto, conhecidos/checados em tempo de compilação. Além de C++, Java, C#, F#, Kotlin e Go são exemplos de linguagens estaticamente tipadas. A principal vantagem de uma linguagem estaticamente tipada é a sua velocidade em tempo de execução. Sua principal desvantagem é a rigidez: você se torna menos produtivo e o código muito mais verboso.\nO quão lento R é comparado à C++?\nNão conseguimos definir um índice preciso de comparação de tempo de execução entre R, C++ ou qualquer outra linguagem de programação. Isto varia muito conforme aplicação, sistema operacional e tamanho dos dados.\nExemplo - Simples Função de Soma\nComo primeiro exemplo, imagine uma função que soma três números inteiros e retorna o valor da soma. Vamos chamar essa função de add() e compararemos o tempo de execução dessa função em R addR() e em C++ addCpp():\n\n\naddR <- function(x, y, z) {\n    result <- x + y + z\n    return(result)\n}\n\naddR(10, 17, 31)\n\n\n[1] 58\n\n\n\nlibrary(\"Rcpp\")\ncppFunction(\"\nint addCpp(int x, int y, int z){\n   int result = x + y + z;\n   return result;\n}\")\n\naddCpp(10, 17, 31)\n\n\n[1] 58\n\nComparando tempo de execução com a função mark() do pacote {bench}:\n\n\nb1 <- bench::mark(\n  R   = addR(10, 17, 31),\n  Cpp = addCpp(10, 17, 31),\n  relative = TRUE\n)\nb1\n\n\n# A tibble: 2 x 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 R           1      1         4.24      131.      NaN\n2 Cpp         3.07   4.90      1           1       NaN\n\n\n\n\nFigure 1: Benchmark da função soma: R vs C++\n\n\n\nAqui vocês vem que C++ não tem nenhuma vantagem sobre R: é mais verboso, chato de escrever e ainda é mais lenta!\nExemplo - Amostrador de Gibbs\nComo segundo exemplo vamos fazer algo mais computacionalmente intensivo. Para quem não conhece, Amostrador de Gibbs (Gibss Sampler) é um algoritmo de aproximação de uma distribuição probabilística multivariada que usa Método de Montecarlo com correntes Markov; e é primariamente utilizado em casos quando amostragem direta não é possível. Este exemplo foi retirado do blog do Dirk Eddelbuettel mantenedor do ecossistema {Rcpp} de pacotes de interfaces entre R e C++.\nO código em R é assim:\n\n\ngibbsR <- function(N, thin) {\n  mat <- matrix(nrow = N, ncol = 2)\n  x <- y <- 0\n\n  for (i in 1:N) {\n    for (j in 1:thin) {\n      x <- rgamma(1, 3, y * y + 4)\n      y <- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))\n    }\n    mat[i, ] <- c(x, y)\n  }\n  return(mat)\n}\n\n\n\nAgora o código em C++ (não se preocupe agora com os Rcpp que aparecem no código, isto será explicado na segunda parte desse tutorial):\n\n\nsourceCpp(code =\n\"#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericMatrix gibbsCpp(int N, int thin) {\n  NumericMatrix mat(N, 2);\n  double x = 0, y = 0;\n\n  for(int i = 0; i < N; i++) {\n    for(int j = 0; j < thin; j++) {\n      x = rgamma(1, 3, 1 / (y * y + 4))[0];\n      y = rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))[0];\n    }\n    mat(i, 0) = x;\n    mat(i, 1) = y;\n  }\n\n  return(mat);\n}\"\n)\n\n\n\nE vamos para o benchmark comparando alguns tamanhos de inputs:\n\n\nb2 <- bench::press(\n  N = 10^c(2:3),\n{\n  bench::mark(\n    R = gibbsR(N, 10),\n    Cpp = gibbsCpp(N, 10),\n    check = FALSE,\n    relative = TRUE\n  )\n}\n)\nb2\n\n\n# A tibble: 4 x 7\n  expression     N   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 R            100  22.3   22.3       1       1284.     1.66\n2 Cpp          100   1      1        22.9        1      1   \n3 R           1000  23.6   24.4       1       2745.     1.53\n4 Cpp         1000   1      1        23.1        1      1   \n\n\n\n\nFigure 2: Benchmarks do Amostrador de Gibbs: R vs C++\n\n\n\nNo meu computador gibbsCpp() executa 20x mais rápido que gibbsR()!\nSobrevoo de C++\nO foco aqui não é ensinar C++. Para isso recomendo você encontrar materiais e cursos que se conformem com o seu estilo de aprendizagem. Eu aprendi com um misto de quatro coisas:\nLivros:\nA Tour of C++: livro de 2018 do criador de C++, Bjarne Stroustrup. É bem conciso e recomendado para quem conhece alguma linguagem de programação orientada a objetos (ex: Python, Java, …).\nC++ Primer: uma das principais referências de C++. Está na quinta edição de 2011. É interessante para aprender o básico de C++ junto com uma introdução à biblioteca padrão (Standard Template Library – STL). Como C++ lança uma nova edição a cada 3 anos, esse livro não possui todas as novas funcionalidades de C++14, C++17 e C++20.\n\nReferências:\ncppreference.com: aqui está a bíblia de C++ totalmente atualizada. Para tudo o que você precisar vale a pena consultar aqui, mas ela é bem técnica. Necessário um certo nível de conhecimento básico em C++ para compreender.\ngeeksforgeeks.com: Geeks for Geeks é um site da Índia sobre programação com uma abordagem mais descontraída. A referência de C++ é bem mais “leve” que a cppreference. Vale a pena para ajudar a entender conceitos que você não tenha entendido pois tem exemplos interessantes.\n\nVídeos no YouTube:\nCppCon: a principal conferência anual sobre C++, todos os vídeos das sessões da conferência são disponibilizados gratuitamente no YouTube.\nCppNow: outra conferência anual sobre C++ com uma pegada mais descontraída e participação da platéia. O vídeo do Conor Hoekstra2 sobre Algorithm Intution é fenomenal.\nMeeting Cpp: outra conferência anual sobre C++, possui bons vídeos com uma pegada similar a CppNow.\nThe Cherno: Um ex-programador de jogos da EA. Ele tem uma didática excelente e eu recomendo a playlist C++ do seu canal.\n\nPodcasts:\nCppCast: podcast de entrevista com desenvolvedores e pessoas de destaque da comunidade C++. Sempre iniciam os episódios comentando com o entrevistado as últimas notícias do mundo C++ e programação em geral.\ncpp.chat: similar ao CppCast.\nADSP: este é um podcast novo e promissor. Seu nome ADSP significa Algorithms + Data Structures = Programs3 e um dos hosts é o Conor Hoekstra programador da NVIDIA e o palestrante do vídeo Algorithm Intution.\n\nHistória do C++\nA linguagem C++ é uma linguagem de programação orientada a objetos e é uma combinação de linguagem de baixo e alto nível – uma linguagem de nível médio. A linguagem de programação foi criada, projetada e desenvolvida por um cientista da computação dinamarquês – Bjarne Stroustrup da Bell Telephone Laboratories (agora conhecida como Nokia Bell Labs) em Murray Hill, New Jersey. Como ele queria uma linguagem flexível e dinâmica que fosse semelhante a C com todos os seus recursos, mas com adicionalidade de verificação de tipo ativa, herança básica, argumento de funcionamento padrão, classes, inlining, etc. e, portanto, C com Classes (C++) foi lançado .\n\n\n\nFigure 3: Bjarne Stroustrup. Figura de: www.wikipedia.org\n\n\n\nC++ era inicialmente conhecido como “C com classes” e foi renomeado C ++ em 1983. ++ é uma abreviação para adicionar um à variedade na programação; portanto, C++ significa aproximadamente que “um maior que C.” Em 1998, foi criado o comitê de padrões C++ que publicou o primeiro padrão internacional ISO para C++, que seria informalmente conhecido como C++98. A cada três anos o comitê de padrões de C++ publica um novo padrão internacional e esses adquirem o sufixo do ano. Até agora temos C++11, C++14, C++17, C++20 e propostas para serem incluídas no C++23.\nO padrão C++11 é importante, tanto que foi seu nome oficial é “o novo padrão C++”. A principal inovação é a biblioteca padrão de C++ (Standard Template Library – STL) que traz quatro componentes chamados algoritmos (algorithms), contêineres (containers), funções (functions) e iteradores (iterators). Os componentes, além de serem revolucionários (C++ pode ser considerado uma linguagem totalmente diferente depois do STL de C++11), são extremamente bem mantidos e documentados. A presença de bugs é quase nula fazendo com que todos os componentes sejam confiáveis e sempre funcionem da maneira que eles foram supostamente projetados para funcionar (a sonda da NASA em Marte possui seu software todo em C++).\nTipos de Variáveis – R vs C++\nOs principais tipos de variáveis de R e sua correspondência em C++ na tabela abaixo. Note que os nomes são bem similares.\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#bwlhguxvcm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bwlhguxvcm .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bwlhguxvcm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bwlhguxvcm .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bwlhguxvcm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bwlhguxvcm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bwlhguxvcm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bwlhguxvcm .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bwlhguxvcm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bwlhguxvcm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bwlhguxvcm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bwlhguxvcm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bwlhguxvcm .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#bwlhguxvcm .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bwlhguxvcm .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bwlhguxvcm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bwlhguxvcm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#bwlhguxvcm .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlhguxvcm .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#bwlhguxvcm .gt_left {\n  text-align: left;\n}\n\n#bwlhguxvcm .gt_center {\n  text-align: center;\n}\n\n#bwlhguxvcm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bwlhguxvcm .gt_font_normal {\n  font-weight: normal;\n}\n\n#bwlhguxvcm .gt_font_bold {\n  font-weight: bold;\n}\n\n#bwlhguxvcm .gt_font_italic {\n  font-style: italic;\n}\n\n#bwlhguxvcm .gt_super {\n  font-size: 65%;\n}\n\n#bwlhguxvcm .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nR\n      C++\n    logical\n\n      bool\n\n    integer\n\n      int\n\n    numeric\n\n      double\n\n    complex\n\n      complex\n\n    character\n\n      string\n\n    \n\nAlém disso, toda linha (instruções e declarações) de C++ deve ser encerrada com um ponto-e-vírgula ;.\nO qualificador – const\nC++ tem diversos tipos de modificadores e qualificadores de variáveis (ex: long, unsigned, volatile, static, etc.). Não vou cobrir todos eles, mas apenas um: const.\nconst significa constante (constant) e é um qualificador usado quando você declara explicitamente que a variável não mudará o seu valor (por mais paradoxal que isso soe…) durante toda a execução do código. Por exemplo se eu tenho um int chamado n_execucao que não mudará o seu valor:\nconst int n_execucao = 10;\nReferências – &\nCada variável que é criada em C++ (e na maioria das outras linguagems de programação) possui um endereço de memória que indica aonde a variável está localizada fisicamente na memória do computador. Esse endereço é como se fosse um código postal indicando aonde conseguimos encontrar a variável. Para criar uma referência usamos o símbolo &. Isto cria uma variável que é uma referência à outra variável e o valor de uma variável referência é o endereço da variável da qual ela referencia. Veja alguns exemplos (obs: // é como comentamos código em C++, equivalente ao # em R):\nint i = 5;  // variável int\nint& j = i; // variável j que é uma referência a i\n&i;         // endereço de memória da variável int i\ni++;        // incrementar i em 1\ni == j;     // TRUE\nj == 5;     // FALSE j agora possui o mesmo valor que i (6)\nPor que usar referências? Por dois motivos:\nPara evitar a cópia de objetos na memória: isso faz o código ficar mais eficiente.\nParamêtros de funções podem especificados por valor ou por referências. No caso de referências, isso é extremamente útil quando queremos alterar os valores dos parâmetros in-place pela função.\nFunções em C++\nA figura 4 mostra a anatomia de uma função em C++. Ela é bem similar à estrutura de funções no R. Com duas notórias diferenças:\nTipo de Retorno: toda função em C++ deve especificar, antes do seu nome, o tipo de dado que é retornado pela função.\nValor de Retorno: toda função em C++ deve especificar explicitamente qual valor retornar com um return. No R podemos ser mais desleixados pois o valor de retorno será sempre a ultima declaração da função. Em C++ isto não funciona. A lógica de C++ é que a função termina quando ela atinge o primeiro return e retorna o dado/variável especificado(a).\n\n\n\nFigure 4: Anatomia de uma função em C++. Figura adaptada da Vinheta Oficial Introdutória do {Rcpp} de Dirk Eddelbuettel\n\n\n\nUsando valores vs referências como parâmetros\nÀs vezes é mais eficiente especificar um parâmetro como uma referência do que como um valor. Veja o caso abaixo de uma função simples de incremento de número inteiro. No primeiro caso, a função increment_val() usa o valor do parâmetro x. Isto implica na função gerar uma cópia de x no escopo local da função. Já no segundo caso, a função increment_ref() usa a referência do parâmetro x. Isto não implica em cópia de x, pois a função manipula o parâmetro x no escopo global.\nComo podem ver, nesse cenário simples temos um pequeno ganho, pelo tempo mediano de execução, ao usarmos o a referência como parâmetro. Claro que nesse exemplo a função é trivial, imaginem como essa diferença escalonaria para maior intensidade computacional ou maior entrada de dados. Sem contar que precisamos de ZERO coletor de lixo (garbage collection – gc), pois não estamos movendo/copiando nada para o escopo local da função.\n\n\ncppFunction(\n\"int increment_val(int x){\n    x++;\n    return x;\n}\"\n)\n\ncppFunction(\n\"int increment_ref(int& x){\n    x++;\n    return x;\n}\"\n)\n\nbench::mark(\n  value = increment_val(5),\n  reference = increment_ref(5)\n)\n\n\n# A tibble: 2 x 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 value        1.42µs   1.61µs   509325.    2.49KB     50.9\n2 reference     1.4µs   1.58µs   589542.    2.49KB      0  \n\nLoops for em C++\n\nObs: Em C++ todos os índices são baseados em zero. Ou seja, o primeiro elemento de uma array é array[0].\n\nOs loops for de C++ são similares ao de R. Eles seguem a seguinte síntaxe:\nfor (inicialização; condição; incremento) instrução;\nFunciona da seguinte maneira:\nA inicialização é executada. Geralmente, isso declara uma variável de contador (counter) e a define para algum valor inicial. Isso é executado uma única vez, no início do loop.\ncondição é verificada. Se for verdade, o loop continua; caso contrário, o loop termina e a instrução é ignorada, indo diretamente para a etapa 5.\ninstrução é executada. Como de costume, pode ser uma única instrução ou um bloco entre chaves {}.\nincremento é executado e o loop volta para a etapa 2.\no loop termina: a execução continua na próxima instrução após ela.\nVeja um exemplo4:\nfor (int i=0; i < 5; i++) {\n      cout << i << \"\\n\";\n    }\nC++11 introduziu uma funcionalidade chamada de range-for loop para ser usado com principalmente com os contêineres da C++11 STL, simplificando muito mais a síntaxe:\nfor (declaração : expressão)\n    instrução\ndeclaração - define uma variável. Deve ser possível converter cada elemento da sequência para o tipo da variável. A maneira mais fácil de garantir que os tipos correspondam é usar o especificador de tipo auto.\nexpressão - deve representar uma sequência, como uma lista de inicializadores entre chaves, um array ou um objeto como umvector ou string que tem membros begin e end que retornam iteradores.\nExemplo:\nvector<int> a {1, 2, 3, 4, 5};\n\nfor (auto i: a) {\n  cout << i << endl;\n}\nCompare com o for loop tradicional (muito mais verboso):\nvector<int> a {1, 2, 3, 4, 5};\n\nfor(int i=0; i < a.size(); i++){\n   cout << a[i] << endl;\n}\nLoops while em C++\nLoops while em C++ são quase que idênticos aos do R. Veja um exemplo:\nint i = 0;\n\nwhile (i < 10){\n    i++;\n    cout << i << \"\\n\";\n}\nDesvios condicionais if, else if e else em C++\nDesvios condicionais em C++ são também quase que idênticos aos do R. Veja um exemplo:\nint i = 2;\n\nif (i > 2) {\n    cout << i << \" é maior que 2\\n\";\n} else if (i == 2){\n    cout << i << \" é extamente igual a 2\\n\";\n} else {\n    cout << i << \" é menor que 2\\n\";\n}\nCasos condicionais switch\nOs casos condicionais usando o operador switch em C++ é também muito similar ao R. A única diferença é que ao invés de = temos : para especificar os casos, veja a síntaxe:\nswitch(i) {\n  case 1 : cout << '1';           // imprime \"1\"\n  case 2 : cout << '2';           // imprime \"2\"\n  default : cout << \"default\\n\";    // imprime \"default\"\n}\nQuando usar C++ no seu código R?\nOs gargalos típicos que C++ pode resolver incluem:\nLoops que não podem ser facilmente vetorizados porque as iterações subsequentes dependem das anteriores.\nFunções recursivas ou problemas que envolvem a chamada de funções milhões de vezes. A sobrecarga de chamar uma função em C++ é muito menor do que em R.\nProblemas que exigem estruturas de dados (contêineres) e algoritmos avançados que R não fornece. Por meio da biblioteca padrão (STL), C++ tem implementações eficientes de muitas estruturas de dados importantes, de mapas ordenados (ordered maps) a filas duplas (double-ended queues).\nEsses contextos são todos os cenários que C++ pode ajudar o seu código. “Nem mesmo os mais sábios sabem o fim de todos os caminhos”5.\n\n\n\nO que mais existe em C++?\nNesse breve sobrevoo de C++ a intenção é apenas possibilitar alguém que não tenha nenhum conhecimento em C++ à ser introduzido em alguns conceitos de C++, notoriamente focando em funções (eu acredito ser a principal razão de usarmos C++ em R – acelerar o tempo de execução de funções). Usando uma analogia, esse sobrevoo permite o leitor “dirigir C++ por um estacionamento vazio”. Caso se interesse, C++ é uma linguagem EXTREMAMENTE rica e complexa. Veja os livros, referências, vídeos e podcasts que eu recomendei lá em cima.\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.4 (2021-02-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] dplyr_1.0.5 gt_0.2.2    Rcpp_1.0.6 \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.0  xfun_0.22         bslib_0.2.4      \n [4] purrr_0.3.4       colorspace_2.0-0  vctrs_0.3.6      \n [7] generics_0.1.0    htmltools_0.5.1.1 yaml_2.2.1       \n[10] utf8_1.1.4        rlang_0.4.10      jquerylib_0.1.3  \n[13] pillar_1.5.1      glue_1.4.2        DBI_1.1.1        \n[16] jpeg_0.1-8.1      lifecycle_1.0.0   stringr_1.4.0    \n[19] commonmark_1.7    munsell_0.5.0     gtable_0.3.0     \n[22] ragg_1.1.1        bench_1.1.1       evaluate_0.14    \n[25] knitr_1.31        parallel_4.0.4    fansi_0.4.2      \n[28] profmem_0.6.0     highr_0.8         backports_1.2.1  \n[31] checkmate_2.0.0   scales_1.1.1      debugme_1.1.0    \n[34] jsonlite_1.7.2    farver_2.1.0      systemfonts_1.0.1\n[37] textshaping_0.3.2 distill_1.2       png_0.1-7        \n[40] ggplot2_3.3.3     digest_0.6.27     stringi_1.5.3    \n[43] grid_4.0.4        cli_2.3.1         tools_4.0.4      \n[46] magrittr_2.0.1    sass_0.3.1        tibble_3.1.0     \n[49] crayon_1.4.1      tidyr_1.1.3       pkgconfig_2.0.3  \n[52] downlit_0.2.1     ellipsis_0.3.1    assertthat_0.2.1 \n[55] rmarkdown_2.7     rstudioapi_0.13   R6_2.5.0         \n[58] compiler_4.0.4   \n\n\nJulia é um caso a parte pois pode ser tanto codificada de maneira estática quando dinâmica, mas isso é assunto para outro tutorial.↩︎\num dos hosts do podcast ADSP.↩︎\nAlgoritmos + Estruturas de Dados = Programas.↩︎\naqui estamos usando o cout do <iostream>. Explicarei como printar mensagens no R usando C++ na segunda parte desse tutorial↩︎\num dos meus objetivos era incluir no mínimo uma referência de Star Wars (já feita no Home) e uma de Senhor dos Anéis↩︎\n",
      "last_modified": "2021-03-12T08:00:03-03:00"
    },
    {
      "path": "2-Rcpp.html",
      "title": "Como incorporar C++ no R -- `{Rcpp}`",
      "description": "Como usar o `{Rcpp}` para funções em C++ no R\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nCriando funções em C++ no R\nsourceCpp()\ncppFunction()\n\nComo exibir mensagens e erros em funções {Rcpp}\nCancelando a Execução no {Rcpp}\nTipos de Dados e Variáveis do {Rcpp}\n{Rcpp} – Vector\n{Rcpp} – Matrix\n{Rcpp} – List\n{Rcpp} – DataFrame\n{Rcpp} tibble\n\n{Rcpp} Sugar\nExemplo – Multiplicação de Matrizes\nUsando a biblioteca padrão C++11 STL no {Rcpp}\nExemplo – std::transforme_reduce()\n\n{Rcpp} e Boost\nExemplo – Máximo Divisor Comum\n\n{Rcpp} e Rmarkdown\nUsar {Rcpp} no seu pacote R\nMateriais Adicionais de Consulta\nAmbiente\n\n\n\nA maneira mais fácil e simples de usar código C++ no R é pelo pacote {Rccp}. O primeiro passo é importar o pacote:\n\n\nlibrary(Rcpp)\n\n\n\nCriando funções em C++ no R\nNo {Rcpp} é possível criarmos funções de duas maneiras1, sendo que ambas retornam as funções criadas em C++ para o ambiente do R:\nsourceCpp(): lê código C++ de um arquivo .cpp ou de uma string.\ncppFunction(): cria uma função C++ de uma string.\nsourceCpp()\nTodo código C++ que é utilizado pelo {Rcpp} deve começar com duas instruções no arquivo (ou string do código):\n#include <Rcpp.h>\nusing namespace Rcpp;\n#include <Rcpp.h> – indica que deve ser incluído o cabeçalho (header) do {Rcpp} no arquivo. Isto permite com que o código faça a interface com o R usando o {Rcpp}.\nusing namespace Rcpp; – importa todos os nomes que estão incluídos dentro da biblioteca {Rcpp}. Para os que tem TOC gostam de boas práticas, não é recomendável importar todos nomes de uma namespace em C++. Isto evita conflitos de nome. Caso queira usar algo de uma namespace você pode fazer de duas maneiras:\nNão importando a namespace e acessar o nome desejado da namespace com os quatro pontos (::). Exemplo:\nRcpp::List // toda vez que usar List tem que indicar que é o List do Rcpp.\nImportando apenas o nome desejado da namespace com o using. Exemplo:\nusing Rcpp::List;\nList  // toda vez que você digitar List C++ entende que é o List do Rcpp.\nAlém disso, para cada função que for criada no código C++ é necessário incluir o // [[Rcpp::export]] logo acima da função. Isto é necessário pois indica ao {Rcpp} que a função deve ser exportada de volta para uso no ambiente do R. No exemplo abaixo criei uma função addCpp() logo depois do Rcpp::export:\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n   int result = x + y + z;\n   return result;\n}\nHá duas maneiras de usar sourceCpp(): fornecendo um arquivo .cpp ou um código C++ como string.\nsourceCpp() – Usando um arquivo .cpp\nCriei um arquivo chamado addCpp.cpp com o código C++ pronto para ser usado pelo {Rcpp} com o sourceCpp(). Note que inclui um bloco de código R que automaticamente será executado após a compilação do arquivo. O ideal é inserir esses blocos de código R na parte final dos seus arquivos .cpp.\n\n\nwriteLines(readLines(\"addCpp.cpp\"))\n\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\n\n// Você pode incluir blocos de códigos de R em código C++\n// (útil para testagem e desenvolvimento). O código R será\n// automaticamente executado após a compilação.\n//\n\n/*** R\naddCpp(11, 21, 31)\n*/\n\n\n\nsourceCpp(file = \"addCpp.cpp\")\n\n\n\n> addCpp(11, 21, 31)\n[1] 63\n\nsourceCpp() – Usando uma string\nDa mesma maneira que usamos sourceCpp() para um arquivo .cpp, também é possível usar uma string em código C++. Abaixo o mesmo exemplo anterior, mas usando uma string:\n\n\nsourceCpp(code = \"\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\n/*** R\naddCpp(11, 21, 31)\n*/\n\")\n\n\n\n> addCpp(11, 21, 31)\n[1] 63\n\ncppFunction()\ncppFunction() faz a mesma coisa que sourceCpp(): retorna uma função criada em C++ para o ambiente do R. Mas com uma pequena diferença: você pode omitir todas as instruções do {Rcpp} – o #include <Rcpp.h>, using namespase Rcpp; e // [[Rcpp::export]].\nUsarei o mesmo exemplo do sourceCpp(), sendo que agora não preciso mais incluir as instruções do {Rcpp}:\n\n\ncppFunction(\"\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\")\n\naddCpp(1, 2, 4)\n\n\n[1] 7\n\nComo exibir mensagens e erros em funções {Rcpp}\nTradicionalmente, em C++, usamos o cabeçalho <iostream> da C++11 STL para imprimir na tela mensagens (cout) e erros cerr:\n#include <iostream>\nusing std::cout;\nusing std::cerr;\n\ncout << \"Imprima algo na tela\\n\";\ncerr << \"Imprima um erro na tela\\n\";\nIsto não funciona muito bem quando executamos uma função C++ no R com o {Rcpp}. Para isso existem dois objetos na namespace Rcpp: Rcout e Rcerr. Veja um exemplo:\n\n\nwriteLines(readLines(\"teste_print.cpp\"))\n\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nvoid teste_print(){\n  Rcout << \"Imprima algo na tela\\n\";\n  Rcerr << \"Imprima um erro na tela\\n\";\n}\n\n\n\nsourceCpp(\"teste_print.cpp\")\nteste_print()\n\n\nImprima algo na tela\n\nCancelando a Execução no {Rcpp}\nA função CheckUserInterrupt() do {Rcpp} verifica se o botão ctrl + c foi pressionado e, se for pressionado, interromperá a execução da função.\nSe você quiser executar um cálculo que leve muito tempo, seria melhor executar checkUserInterrupt() aproximadamente uma vez a cada poucos segundos. Veja este exemplo de um loop for:\nfor (int i=0; i<100000; ++i) {\n    // Checando interrupção a cada 1000 iterações\n    if (i % 1000 == 0){\n        Rcpp::checkUserInterrupt();\n    }\n\n    // instruções do loop ...\n}\nTipos de Dados e Variáveis do {Rcpp}\nTemos sete tipos de variáveis que são usualmente usados no R: logical, integer, numeric,complex, character, Date e POSIXct. Sendo que esses sete tipos são usados no R para construir vetores (arrays 1-D) e matrizes (arrays 2-D). Apenas um lembrete:\n\n\nvec_int <- c(1L, 2L, 3L, 4L)\nstr(vec_int)\n\n\n int [1:4] 1 2 3 4\n\nmat_num <- matrix(c(1.1, 2.2, 3.3, 4.4), nrow = 2, ncol = 2)\nstr(mat_num)\n\n\n num [1:2, 1:2] 1.1 2.2 3.3 4.4\n\n{Rcpp} possui tipos de vetores e matrizes para representar correspondentemente aos do R.\nA tabela abaixo apresenta a correspondência dos tipos de dados entre R/{Rcpp}/C++:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hlowiptipt .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hlowiptipt .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hlowiptipt .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hlowiptipt .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hlowiptipt .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hlowiptipt .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hlowiptipt .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hlowiptipt .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hlowiptipt .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hlowiptipt .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hlowiptipt .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hlowiptipt .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hlowiptipt .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#hlowiptipt .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hlowiptipt .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hlowiptipt .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hlowiptipt .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#hlowiptipt .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hlowiptipt .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#hlowiptipt .gt_left {\n  text-align: left;\n}\n\n#hlowiptipt .gt_center {\n  text-align: center;\n}\n\n#hlowiptipt .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hlowiptipt .gt_font_normal {\n  font-weight: normal;\n}\n\n#hlowiptipt .gt_font_bold {\n  font-weight: bold;\n}\n\n#hlowiptipt .gt_font_italic {\n  font-style: italic;\n}\n\n#hlowiptipt .gt_super {\n  font-size: 65%;\n}\n\n#hlowiptipt .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nTipo de Variável\n      Vetor R\n      Vetor Rcpp\n      Matriz Rcpp\n      Escalar Rcpp\n      Missing Rcpp\n      Escalar C++\n    Lógica\n\n      logical\n\n      LogicalVector\n\n      LogicalMatrix\n\n      -\n\n      NA_LOGICAL\n\n      bool\n\n    Inteiro\n\n      integer\n\n      IntegerVector\n\n      IntegerMatrix\n\n      -\n\n      NA_INTEGER\n\n      int\n\n    Real\n\n      numeric\n\n      NumericVector\n\n      NumericMatrix\n\n      -\n\n      NA_REAL\n\n      double\n\n    Complexo\n\n      complex\n\n      ComplexVector\n\n      ComplexMatrix\n\n      Rcomplex\n\n      -\n\n      complex\n\n    String\n\n      character\n\n      CharacterVector (StringVector)\n\n      CharacterMatrix (StringMatrix)\n\n      String\n\n      NA_STRING\n\n      std::string\n\n    Date\n\n      Date\n\n      DateVector\n\n      -\n\n      Date\n\n      -\n\n      -\n\n    Datetime\n\n      POSIXct\n\n      DatetimeVector\n\n      -\n\n      Datetime\n\n      -\n\n      time_t\n\n    \n\nAlém de vetores e matrizes, {Rcpp} também possui as estrutura de dados correspondentes ao data.frame e list:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#zpxxfmikco .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#zpxxfmikco .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#zpxxfmikco .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#zpxxfmikco .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#zpxxfmikco .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#zpxxfmikco .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#zpxxfmikco .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#zpxxfmikco .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#zpxxfmikco .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#zpxxfmikco .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#zpxxfmikco .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#zpxxfmikco .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#zpxxfmikco .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#zpxxfmikco .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpxxfmikco .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpxxfmikco .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#zpxxfmikco .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#zpxxfmikco .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zpxxfmikco .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#zpxxfmikco .gt_left {\n  text-align: left;\n}\n\n#zpxxfmikco .gt_center {\n  text-align: center;\n}\n\n#zpxxfmikco .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#zpxxfmikco .gt_font_normal {\n  font-weight: normal;\n}\n\n#zpxxfmikco .gt_font_bold {\n  font-weight: bold;\n}\n\n#zpxxfmikco .gt_font_italic {\n  font-style: italic;\n}\n\n#zpxxfmikco .gt_super {\n  font-size: 65%;\n}\n\n#zpxxfmikco .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nR\n      Rcpp\n    data.frame\n\n      DataFrame\n\n    list\n\n      List\n\n    \n\nNo {Rcpp}, Vector, DataFrame, List são todos implementados como tipos de vetores. Ou seja, Vector é um vetor em que seus elementos são valores escalares, DataFrame é um vetor em que seus elementos são Vector, List é um vetor em que seus elementos são qualquer tipo de tipo de dados. Portanto, Vector, DataFrame, List tem muitas funcionalidades em comum.\nMuito importante: {Rcpp} converterá qualquer tipo de retorno das funções para o seu respectivo tipo em R. Por exemplo, NumericVector será convertido para um vetor de numeric no R. Assim como LogicalMatrix será convertida para uma matriz de logical no R.\n{Rcpp} – Vector\nVector no {Rcpp} são arrays 1-D com tamanho dinâmico (não-estático). Note que Vector é um objeto dentro do namespace Rcpp.\nCriando Objetos de Vector\nVeja alguns exemplos de como criar objetos de Vector com o código em R correspondente comentado com //:\n// Crie um objeto Vector equivalente a\n// v <- rep(0, 3)\nNumericVector v (3);\n\n// v <- rep(1, 3)\nNumericVector v (3,1);\n\n// v <- c(1,2,3)\n// C++11 Inicialização em Lista\nNumericVector v = {1,2,3};\n\n// v <- c(1,2,3)\nNumericVector v = NumericVector::create(1,2,3);\n\n// v <- c(x=1, y=2, z=3)\nNumericVector v =\nNumericVector::create(Named(\"x\",1), Named(\"y\")=2 , _[\"z\"]=3);\na função Rcpp::Named() é usada para criar vetores (e outros objetos) nomeados e há 3 variações conforme demonstrado acima.\nAcessando Elementos de Vector\nVocê pode acessar um elemento individual de um objeto Vector usando o operador [] ou ()2 Ambos os operadores aceitam NumericVector/IntegerVector (índice numérico), CharacterVector (nomes de elementos) e LogicalVector. O operador [] ignora o acesso fora do limite, enquanto o operador () lança uma exceção index_out_of_bounds.\nVocê pode também usar o método .names() do Vector para designar nomes ao elementos.\n// Criando o Vector v\nNumericVector v  {10,20,30,40,50};\n\n// Designando nomes dos elementos\nv.names() = CharacterVector({\"A\",\"B\",\"C\",\"D\",\"E\"});\n\n// Extraindo valores dos elementos de Vector\ndouble x1 = v[0];\ndouble x2 = v[\"A\"];\n\n// Designando valores aos elementos de Vector\nv[0]   = 100;\nv[\"A\"] = 100;\nMétodos de Vector\nAbaixo um exemplo dos principais métodos de Vector3. Lembrando que muitas dessas funcionalidades são compartilhadas com Matrix, List e DataFrame. Para uma lista completa dos métodos das classes de {Rcpp} recomendo a documentação não-oficial de {Rcpp} do James Balamuta (também conhecido como TheCoatlessProfessor).\nlength(), size()\nnames()\nfill(x)\nsort()\npush_back(x), push_front(x), insert(i, x), erase(i)\nOperações com Vector\nAlém de métodos, os elementos Vector possuem alguns operadores:\nadição, subtração, multiplicação, divisão: +,-, *, /\nigualdade e desigualdades: ==, !=, <, >, >=, <=\nnegação: !\n{Rcpp} – Matrix\nMatrix no {Rcpp} são arrays 2-D com tamanho estático. Note que Matrix é um objeto dentro do namespace Rcpp.\nA criação dos objetos Matrix é similar à criação de objetos Vector. Veja alguns exemplos de como criar objetos de Matrix com o código em R correspondente comentado com //:\n// Criação de um objeto Matrix equivalente a\n// m <- matrix(0, nrow=2, ncol=2)\nNumericMatrix m1(2);\n\n// m <- matrix(0, nrow=2, ncol=3)\nNumericMatrix m2(2 , 3);\nVocê pode acessar os elementos da mesma forma que Vector. Além disso, um objeto Matrix em R é na verdade um vetor cujo número de linhas e colunas é definido no atributo dim. Portanto, se você criar um vetor com o atributo dim em {Rcpp} e devolvê-lo a R, ele será tratado como uma matriz:\n// Criação de um objeto Vector\nNumericVector v = {1,2,3,4};\n\n// Designa o número de linhas e colunas no atributo dim do objeto Vector\nv.attr(\"dim\") = Dimension(2, 2);\n\n// Valor de retorno. Será tratado como uma matriz no R\nreturn v;\n{Rcpp} – List\nEm {Rcpp}, objetos List são implementados como uma espécie de Vector. Em outras palavras, Vector é um vetor cujo elemento é um valor escalar, enquanto List é um vetor cujos elementos são quaisquer tipos de dados. Portanto, Vector e List geralmente têm as mesmas funcionalidades.\nPara criar um objeto List, usamos a função List::create(). Além disso, para especificar o nome do elemento ao criar List, use a função Named()ou _[]:\n// Criação de um objeto List L dos vetores v1, v2\nList L = List::create(v1, v2);\n\n// Criação atribuindo nomes aos elementos da Lista L\nList L = List::create(Named(\"nome1\") = v1 , _[\"nome2\"] = v2);\n{Rcpp} – DataFrame\nEm {Rcpp}, objetos DataFrame também são implementados como uma espécie de Vector. Em outras palavras, Vector é um vetor cujos elementos são valores escalares e DataFrame é um vetor cujos elementos são Vector. Portanto, DataFrame tem muitas funcionalidades em comum com Vector.\nDataFrame::create() é usado para criar um objeto DataFrame. Além disso, use Named() ou _[] se desejar especificar os nomes das colunas ao criar o objeto DataFrame:\n// Criação de um objeto DataFrame df dos vetores v1, v2\nDataFrame df = DataFrame::create(v1, v2);\n\n// Criação atribuindo nomes às colunas de DataFrame df\nDataFrame df = DataFrame::create( Named(\"V1\") = v1 , _[\"V2\"] = v2 );\n{Rcpp} tibble\nPara retornar uma tibble do {tidyverse} com o {Rcpp} é só você notar que uma tibble não é nada mais que um data.frame com algumas classes extras:\n\n\ndf <- tibble::tibble()\nclass(df)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nE aí é só adicionar essas classes num DataFrame do {Rcpp}:\nDataFrame df = DataFrame::create( Named(\"V1\") = v1 , _[\"V2\"] = v2 );\ndf.attr(\"class\") = CharacterVector::create(\"tbl_df\", \"tbl\", \"data.frame\");\nPronto seu objeto DataFrame quando for retornado ao R será uma tibble do {tidyverse}.\n{Rcpp} Sugar\nAlém dos tipos de dados, {Rcpp} também tem uma ampla gama de “açúcares” sintáticos (syntactic sugar) para as mais variadas operações e funções. Antes de tentar criar algo do zero veja se não há um {Rccp} Sugar para isso já implementado na vinheta.\nExemplo – Multiplicação de Matrizes\nEstá na hora de colocarmos o que vimos em prática. Nesse caso vamos comparar multiplicar duas matrizes usando o R (operador %*%) e usando o C++ com {Rcpp}.\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericVector mat_mul(const NumericVector& A, const NumericVector& B) {\n  NumericVector C = A * B;\n\n  // dimensões para Vector virar Matrix no R\n  int dim = sqrt(A.length());\n  C.attr(\"dim\") = Dimension(dim, dim);\n\n  return C;\n}\n\n\n\nb1 <- bench::press(\n  n = 10^c(2:3),\n  {\n    X = matrix(rnorm(n * n), nrow = n)\n    bench::mark(\n      R = X %*% X,\n      Cpp = mat_mul(X, X),\n      check = FALSE,\n      relative = TRUE\n  )}\n)\nb1\n\n\n# A tibble: 4 x 7\n  expression     n   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 R            100  70.0   72.1       1        1         1  \n2 Cpp          100   1      1        58.2      1.03     76.3\n3 R           1000 692.   307.        1        1       NaN  \n4 Cpp         1000   1      1       309.       1.00    Inf  \n\n\n\n\nFigure 1: Benchmarks de Multiplicação de Matriz: R vs C++\n\n\n\nSucesso! Ganho de 200x 🤯\nUsando a biblioteca padrão C++11 STL no {Rcpp}\nCaso queira usufruir da biblioteca padrão C++11 STL no {Rcpp} é simples: basta incluir // [[Rcpp::plugins(\"cpp11\")]] em qualquer parte do seu código C++.\nCaso queira usufruir da biblioteca padrão C++20 STL no {Rcpp} é também simples: basta incluir // [[Rcpp::plugins(\"cpp2a\")]]4 em qualquer parte do código C++.\nExemplo – std::transforme_reduce()\nAqui eu vou ser um pouco abusado no exemplo e já vou pular direto para um algoritmo relativamente novo no mundo da STL de C++ (e um dos meus preferidos…). No mundo das linguagens de programação ele é conhecimento como MapReduce, mas em C++ chama-se transform_reduce() e está disponível no header <numeric> desde C++17.\nSoma dos quadrados é algo que ocorre bastante em computação científica, especialmente quando estamos falando de regressão, mínimos quadrados, ANOVA etc. Vamos fazer três implementações de uma função que aceita como parâmetro um vetor de números reais (C++ double / R numeric) e computa a soma de todos os elementos do vetor elevados ao quadrado:\nsum_of_squares_R(): feita no R com vetorização.\nsum_of_squares_rcpp(): feita de maneira ingênua no C++ com dois loops for triviais que (1) multiplica cada elemento consigo mesmo e (2) adiciona todos os elementos do vetor à uma variável double.\nsum_of_squares_rcpp20(): solução elegante que usa transform_reduce para transformar todos os elementos multiplicando-os por si mesmos e ao mesmo tempo somando todos os elementos.\nsum_of_squares_rcpp_sugar(): solução usando {Rcpp} Sugar.\n\n\nsum_of_squares_R <- function(v) {\n  sum(v * v)\n}\n\n\n\n\n#include <Rcpp.h>\n// [[Rcpp::plugins(\"cpp11\")]]\n// [[Rcpp::plugins(\"cpp2a\")]]\n#include <numeric>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble sum_of_squares_rcpp(NumericVector v){\n  double sum_of_elems = 0;\n\n  // primeiro for multiplicando cada elemento consigo mesmo\n  for(int i=0; i < v.size(); i++){\n    v[i] = v[i] * v[i];\n  }\n\n  // segundo for somando todos os elementos\n  for(auto it = v.cbegin(); it != v.cend(); ++it)\n    sum_of_elems += *it;\n  return sum_of_elems;\n}\n\n// [[Rcpp::export]]\ndouble sum_of_squares_rcpp20(const NumericVector v){\n\n  return transform_reduce(v.cbegin(),\n                          v.cend(),\n                          0L,\n                          std::plus{},\n                          [] (auto i) {return i * i;});\n}\n\n// [[Rcpp::export]]\ndouble sum_of_squares_rcpp_sugar(NumericVector v){\n  return(sum(v*v));\n}\n\n\n\nset.seed(123)\n\nb2 <- bench::press(\n  n = 10^c(1:4),\n  {\n    v = rnorm(n)\n    bench::mark(\n      R = sum_of_squares_R(v),\n      rcpp = sum_of_squares_rcpp(v),\n      rcpp20 = sum_of_squares_rcpp20(v),\n      rcppsugar = sum_of_squares_rcpp_sugar(v),\n      check = FALSE,\n      relative = TRUE\n    )\n})\nb2\n\n\n# A tibble: 16 x 7\n   expression     n   min median `itr/sec` mem_alloc `gc/sec`\n   <bch:expr> <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n 1 R             10  1      1         1.84    NaN         NaN\n 2 rcpp          10  2.13   2.01      1       Inf         NaN\n 3 rcpp20        10  1.95   1.89      1.06    Inf         Inf\n 4 rcppsugar     10  1.98   1.88      1.07    Inf         NaN\n 5 R            100  1      1         1.99      1         NaN\n 6 rcpp         100  2.11   1.99      1         3.01      Inf\n 7 rcpp20       100  1.57   1.51      1.31      3.01      Inf\n 8 rcppsugar    100  1.62   1.55      1.30      3.01      NaN\n 9 R           1000  1.31   1.32      2.74      3.15      Inf\n10 rcpp        1000  3.44   3.64      1         1         Inf\n11 rcpp20      1000  1      1         3.59      1         NaN\n12 rcppsugar   1000  1.23   1.22      2.96      1         Inf\n13 R          10000  2.43   2.51      2.47     31.4       Inf\n14 rcpp       10000  8.41   8.28      1         1         NaN\n15 rcpp20     10000  1      1         8.31      1         Inf\n16 rcppsugar  10000  1.74   1.79      4.15      1         NaN\n\n\n\n\nFigure 2: Benchmarks de Soma dos Quadrados: R vs alternativas C++\n\n\n\nAqui vemos como a vetorização do R funciona muito bem. É mais rápida que quase todas as implementações em {Rcpp}, exceto quando usamos o {Rcpp} Sugar já que temos um ganho de 2x.\n{Rcpp} e Boost\nBoost é um conjunto de bibliotecas para a linguagem de programação C++ que fornece suporte para tarefas e estruturas como álgebra linear, geração de números pseudo-aleatórios, multithreading, processamento de imagem, expressões regulares e teste de unidade. Ele contém uma porrada 164 bibliotecas individuais (versão 1.75) e sua versão inicial foi lançada em 1999.\nA maioria das bibliotecas Boost são licenciadas sob a Licença de Software Boost, projetada para permitir que Boost seja usado com projetos de software proprietários e gratuitos. Muitos dos fundadores da Boost estão no comitê internacional de padrões C++, e várias bibliotecas Boost foram aceitas para incorporação no padrão C++11 (por exemplo, smart pointers, thread, regex, random, ratio, tuple) e no padrão C++17 (por exemplo, filesystem, any, optional, variant, string_view).\nAntes de usar o Boost no {Rcpp} certifique-se que você tem o Boost instalado no seu sistema operacional:\nLinux: sudo apt-get install libboost-all-dev\nMacOS: brew install boost\nWindows: baixe no site do Boost.org ou choco install boost-msvc-14.1\nPara usar o Boost no {Rcpp} também é muito simples:\nCertifique-se que você tem o pacote {BH} (Boost Headers) de R instalado.\nInclua a síntaxe // [[Rcpp::depends(BH)]] em qualquer lugar do seu código C++.\nInclua o header que deseja usar do boost no topo do seu código C++. Ex: #include <boost/header_qualquer.hpp>\nExemplo – Máximo Divisor Comum\nO Máximo Divisor Comum (MDC), em inglês Greatest Common Divisor (GCD), de dois ou mais inteiros, que não são todos zero, é o maior inteiro positivo que divide cada um dos inteiros. Três abordagens:\nrGDCD(): R usando o algoritmo de Euclides.\ncppGCD(): C++ usando std::gcd() do header <numeric> (C++17).\nboostGCD(): C++ usando a biblioteca boost::integer.\n\n\nrGCD <- function(a, b) {\n  if (a == 0) {\n    b\n  }\n  else {\n    rGCD(b %% a, a)\n  }\n}\n\n\n\n\n#include <Rcpp.h>\n// [[Rcpp::plugins(\"cpp11\")]]\n// [[Rcpp::plugins(\"cpp17\")]]\n// [[Rcpp::depends(BH)]]\n#include <numeric>\n#include <boost/integer/common_factor_rt.hpp>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint cppGCD(int& a, int& b){\n  return std::gcd(a, b);\n}\n\n// [[Rcpp::export]]\nint boostGCD(int& a, int& b) {\n    return boost::integer::gcd(a, b);\n}\n\n\n\na <- 7919\nb <- 7412\nb3 <- bench::mark(\n  R = rGCD(a, b),\n  cpp = cppGCD(a, b),\n  boost = boostGCD(a, b),\n  relative = TRUE\n)\nb3\n\n\n# A tibble: 3 x 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 R           4.05   4.17      1         6.29     1   \n2 cpp         1.03   1.02      3.94      1        1.97\n3 boost       1      1         4.02      1        2.01\n\n\n\n\nFigure 3: Benchmarks de Máximo Divisor Comum: R vs C++\n\n\n\nAqui eu escolhi um número primo bem grande, 7189, e um número aleatório próximo dele, 7412. Como vocês podem ver a solução usando a biblioteca boost::integer é 4,5x mais rápida que uma implementação em R e similar com a implementação de C++17.\n{Rcpp} e Rmarkdown\nPara usar o {Rcpp} em documentos rmarkdown basta colocar Rcpp no chunk ao invés de r. Sendo que no Rmarkdown não é necessário incluir as instruções do {Rcpp} – o #include <Rcpp.h> ou using namespace Rcpp;, isto já é feito automático para você.\n\n\n\nFigure 4: {Rcpp} no Rmarkdown\n\n\n\nUsar {Rcpp} no seu pacote R\nPara adicionar {Rcpp} a um pacote existente, coloque seus arquivos C++ no diretório src/ e crie ou modifique os seguintes arquivos de configuração:\nNo DESCRIPTION adicione:\nLinkingTo: Rcpp\nImports: Rcpp\nCertifique-se de que seu NAMESPACE inclua:\nuseDynLib(mypackage)\nimportFrom(Rcpp, sourceCpp)\nA maneira mais fácil de configurar isso automaticamente é usar a função usethis::use_rcpp().\nAntes de dar build do pacote, você precisará executar Rcpp::compileAttributes(). Esta função verifica os arquivos C++ em busca de atributos Rcpp::export e gera o código necessário para disponibilizar as funções em R. Execute novamente compileAttributes() sempre que as funções forem adicionadas, removidas ou seus nomes forem alterados. Isso é feito automaticamente pelo pacote {devtools} e pelo Rstudio.\nPara obter mais detalhes, consulte a vinheta do pacote {Rcpp}, vignette(\"Rcpp-package\").\nMateriais Adicionais de Consulta\nDiversos materiais me ajudaram a aprender e criar esse conjunto de tutoriais de {Rcpp}:\nLivro Seamless R and C++ Integration with Rcpp do criador do ecossistema {Rcpp} Dirk Eddelbuettel.\nCapítulo 25 – Rewriting R code in C++ do livro Advanced R do Hadley Wickham.\nGaleria de exemplos de {Rcpp}.\nVinheta do {Rcpp} Sugar.\nLivro Rcpp for Everyone do Masaki E. Tsuda.\nDocumentação Não-Oficial de {Rcpp} do James Balamuta (também conhecido como TheCoatlessProfessor).\nVídeo do Dirk Eddelbuettel na conferência useR! 2020 sobre {Rcpp}.\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.4 (2021-02-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] dplyr_1.0.5 gt_0.2.2    Rcpp_1.0.6 \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.0  xfun_0.22         bslib_0.2.4      \n [4] purrr_0.3.4       colorspace_2.0-0  vctrs_0.3.6      \n [7] generics_0.1.0    htmltools_0.5.1.1 emo_0.0.0.9000   \n[10] yaml_2.2.1        utf8_1.1.4        rlang_0.4.10     \n[13] jquerylib_0.1.3   pillar_1.5.1      glue_1.4.2       \n[16] DBI_1.1.1         lifecycle_1.0.0   stringr_1.4.0    \n[19] munsell_0.5.0     commonmark_1.7    gtable_0.3.0     \n[22] ragg_1.1.1        bench_1.1.1       evaluate_0.14    \n[25] knitr_1.31        parallel_4.0.4    fansi_0.4.2      \n[28] highr_0.8         profmem_0.6.0     scales_1.1.1     \n[31] backports_1.2.1   checkmate_2.0.0   debugme_1.1.0    \n[34] jsonlite_1.7.2    farver_2.1.0      systemfonts_1.0.1\n[37] textshaping_0.3.2 distill_1.2       png_0.1-7        \n[40] ggplot2_3.3.3     digest_0.6.27     stringi_1.5.3    \n[43] grid_4.0.4        BH_1.75.0-0       cli_2.3.1        \n[46] tools_4.0.4       magrittr_2.0.1    sass_0.3.1       \n[49] tibble_3.1.0      crayon_1.4.1      tidyr_1.1.3      \n[52] pkgconfig_2.0.3   downlit_0.2.1     ellipsis_0.3.1   \n[55] lubridate_1.7.10  assertthat_0.2.1  rmarkdown_2.7    \n[58] rstudioapi_0.13   R6_2.5.0          compiler_4.0.4   \n\n\ntem também o evalCpp() mas não vou cobrir aqui↩︎\nlembrando que C++ os índices começam em zero: então o primeiro elemento é Vector[0].↩︎\nquem conhece C++, em especial a C++11 STL, pode ver que muitos métodos de Vector são iguais à std::vector.↩︎\nverifique também como instalar um compilador C++ que dê suporte ao C++20 (talvez o g++ versão 10).↩︎\n",
      "last_modified": "2021-03-12T08:00:46-03:00"
    },
    {
      "path": "3-RcppEigen_RcppArmadillo.html",
      "title": "Manipulação de Matrizes -- `{RcppEigen}` e `{RcppArmadillo}`",
      "description": "Como usar as bibliotecas C++ `Eigen` e `Armadillo` para poderosa Álgebra Linear\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nArmadillo\nClasses do Armadillo\nComo usar Armadillo com {Rcpp} – {RcppArmadillo}\nComo usar Matrizes Esparsas no {RcppArmadillo}\n\nEigen\nClasses do Eigen\nComo usar Eigen com {Rcpp} – {RcppEigen}\nComo usar Matrizes Esparsas no {RcppEigen}\n\nBenchmarks\nExemplo – Multiplicação de Matrizes\nExemplo – Matriz Esparsa\nExemplo – Regressão Linear fast_lm()\n\nUsar {RcppArmadillo} ou {RcppEigen} no seu Pacote R\nAmbiente\n\n\n\nImagine Álgebra Linear. Adição, Multiplição de Matrizes. Sistemas de Equações Lineares. Inversões de Matrizes. Decomposições de Matrizes. Autovalores, Autovetores e Valores Singulares. Eu pessoalmente acredito que o inferno deve ser um lugar que as pessoas são obrigadas a fazer cálculos de álgebra linear na mão! POR TODA A ETERNIDADE!1.\nCaso você não saiba, o computador não foi criado para assistir pornografia para envio de e-mails, navegação na internet, ou games. Mas sim para operações e manipulações de matrizes! Shayle Searle no livro Matrix Algebra Useful for Statistics recorda que, durante seus anos de estudante de doutorado em 1959 na Cornell University, ele e seus colegas ficaram impressionados quando conseguiram inverter uma matriz de dimensão 10 x 10 em 7 minutos num computador. Searle também recorda que um ano antes, um colega inverteu uma matriz de dimensão 40 x 40 usando uma calculadora elétrica. Ele demorou 6 semanas!\nNesse tutorial vou mostrar como usar o básico das bibliotecas C++ Eigen e Armadillo. Ambas fazem a mesma coisa: Álgebra Linear e Manipulação de Matrizes e Vetores. Elas diferem (além da síntaxe) em uma coisa:\nArmadillo depende de LAPACK/BLAS/MKL\nEigen não possui nenhuma dependência\nAlém disso, em diversos benchmarks que eu fiz, Eigen (pelo menos no meu computador) é mais rápida que Armadillo. Esse tutorial apresentará primeiro Armadillo e a sua interface com R usando o {RcppArmadillo} e {Rcpp}. Na sequência apresentarei Eigen e sua interface com R usando o {RcppEigen} e {Rcpp}. Não se preocupe, qualquer uma das duas é literalmente “Álgebra Linear com Lasers”: são muito rápidas!\n\n\n\nFigure 1: Qualquer escolha entre Armadillo e Eigen são bem rápidas: Álgebra Linear com Lasers!.\n\n\n\nArmadillo\nArmadillo é uma biblioteca de álgebra linear de alta qualidade para a linguagem C++, visando um bom equilíbrio entre velocidade e facilidade de uso. Ela fornece sintaxe deliberadamente semelhante ao Matlab. Caso você tenha experiência prévia com Matlab, use Armadillo e seja feliz. Veja em seu site mais informações sobre a biblioteca Armadillo. Além disso, recomendo as seguintes referências sobre Armadillo:\nCheatsheet de síntaxe Armadillo vs Matlab / Octave feita pela própria equipe da Armadillo.\nSite do pacote {RcppArmadillo} que faz a interface entre Rcpp e Armadillo.\nCheatsheet de operações comuns de {RcppArmadillo} pelo James Balamuta (também conhecido como TheCoatlessProfessor).\nDocumentação do Armadillo\nClasses do Armadillo\nArmadillo possui algumas categorias de classes para representar diferentes objetos de álgebra linear:\nDense Matrix – Classes para matrizes densas (não-esparsas), com elementos armazenados em ordem de coluna principal (ou seja, coluna por coluna).\nmat      =    Mat<double>\ndmat     =    Mat<double>\nfmat     =    Mat<float>\ncx_mat   =    Mat<cx_double>  // cx_ é Complex Numbers\ncx_dmat  =    Mat<cx_double>  // cx_ é Complex Numbers\ncx_fmat  =    Mat<cx_float>   // cx_ é Complex Numbers\nDense Vector – aqui se divide em vetores coluna (Column Vector) e vetores linha (Row Vector).\nColumn Vector – Dense Matrix com apenas uma única coluna.\nvec      =  colvec       =  Col<double>\ndvec     =  dcolvec      =  Col<double>\nfvec     =  fcolvec      =  Col<float>\ncx_vec   =  cx_colvec    =  Col<cx_double>  // cx_ é Complex Numbers\ncx_dvec  =  cx_dcolvec   =  Col<cx_double>  // cx_ é Complex Numbers\ncx_fvec  =  cx_fcolvec   =  Col<cx_float>   // cx_ é Complex Numbers\nRow Vector – Dense Matrix com apenas uma única linha.\nrowvec       =   Row<double>\ndrowvec      =   Row<double>\nfrowvec      =   Row<float>\ncx_rowvec    =   Row<cx_double>  // cx_ é Complex Numbers\ncx_drowvec   =   Row<cx_double>  // cx_ é Complex Numbers\ncx_frowvec   =   Row<cx_float>   // cx_ é Complex Numbers\nSparse Matrix – Classes para matrizes esparsas; destina-se a armazenar matrizes muito grandes, onde a grande maioria dos elementos são zero.\nsp_mat      =   SpMat<double>\nsp_dmat     =   SpMat<double>\nsp_fmat     =   SpMat<float>\nsp_cx_mat   =   SpMat<cx_double>  // cx_ é Complex Numbers\nsp_cx_dmat  =   SpMat<cx_double>  // cx_ é Complex Numbers\nsp_cx_fmat  =   SpMat<cx_float>   // cx_ é Complex Numbers\nComo usar Armadillo com {Rcpp} – {RcppArmadillo}\nPrimeiro, certifique-se que você possui a biblioteca Armadillo instalada:\nLinux: sudo apt-get install make libopenblas-dev liblapack-dev libarpack2-dev libsuperlu-dev\nMacOS: brew install armadillo\nWindows: baixe no site do Armadillo\nSegundo, instale o pacote {RcppArmadillo} para R.\nTerceiro, coloque em todo código que deseja usar o Armadillo com {Rcpp} a seguinte síntaxe:\n#include <RcppArmadillo.h>\nusing namespace arma;\n\n// [[Rcpp::depends(RcppArmadillo)]]\nAtenção!: não usar o header do {Rcpp} (#include <Rcpp.h>), pois ele conflita com o header do {RcppArmadillo} (#include <RcppArmadillo.h>).\nPronto! É isso.\nComo usar Matrizes Esparsas no {RcppArmadillo}\nO R possui um pacote {Matrix} que dá suporte à matrizes esparsas com uma classe dgCMatrix que significa double sparse Compressed Matrix. Veja um exemplo abaixo de uma matriz densa com 1,000,000 de elementos. Vamos enfiar alguns zeros nela de maneira aleatória. A matriz densa possui um tamanho de 7,6mb.\n\n\nset.seed(123)\ndata <- rnorm(1e6)\nzero_index <- sample(1e6)[1:9e5]\ndata[zero_index] <- 0\nmat <- matrix(data, ncol=1000)\nmat[1:5,1:5]\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,] 0.00    0    0    0    0\n[2,] 0.00    0    0    0    0\n[3,] 0.00    0    0    0    0\n[4,] 0.00    0    0    0    0\n[5,] 0.13    0    0    0    0\n\nprint(object.size(mat), units = \"auto\")\n\n\n7.6 Mb\n\nAgora a mesma matriz mas armazenada como uma matriz esparsa pelo pacote {Matrix}. Note que os zeros foram eliminados da matriz (são armazenados de uma outra maneira) e o seu tamanho agora é 1,1mb.\n\n\nlibrary(Matrix)\nmat_sparse <- Matrix(mat, sparse=TRUE)\nmat_sparse[1:5,1:5]\n\n\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n                 \n[1,] .    . . . .\n[2,] .    . . . .\n[3,] .    . . . .\n[4,] .    . . . .\n[5,] 0.13 . . . .\n\nprint(object.size(mat_sparse),units=\"auto\")\n\n\n1.1 Mb\n\nSe inspecionarmos de maneira detalhada um objeto dgCMatrix, vemos que temos três atributos importantes:\ni – vetor com o índice da linha de todos os elementos não-zero.\np – vetor com o índice da coluna de todos os elementos não-zero.\nx – vetor com os valores de todos os elementos não-zero.\n\n\nstr(mat_sparse)\n\n\nFormal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n  ..@ i       : int [1:100000] 4 13 16 28 29 36 57 61 80 106 ...\n  ..@ p       : int [1:1001] 0 100 211 316 412 522 620 724 806 894 ...\n  ..@ Dim     : int [1:2] 1000 1000\n  ..@ Dimnames:List of 2\n  .. ..$ : NULL\n  .. ..$ : NULL\n  ..@ x       : num [1:100000] 0.129 0.111 0.498 -1.138 1.254 ...\n  ..@ factors : list()\n\nPara que {RcppArmadillo} nos retorne um objeto dgCMatrix, é simples: basta a função retornar um objeto arma::sp_mat. Este exemplo foi retirado da vinheta de Matriz Esparsa do {RcppArmadillo}.\n\n#include <RcppArmadillo.h>\nusing namespace Rcpp;\nusing namespace arma;\n\n// [[Rcpp::depends(RcppArmadillo)]]\n\n// [[Rcpp::export]]\nsp_mat sqrt_arma(sp_mat& X) {\n  return sqrt(X);\n}\n\n\n\ni <- c(1,3:8)\np <- c(2,9,6:10)\nx <- 7 * (1:7)\nA <- sparseMatrix(i, p, x = x)\nsqrt_arma(A)\n\n\n8 x 10 sparse Matrix of class \"dgCMatrix\"\n                                  \n[1,] . 2.6 . . . .   .   .   .   .\n[2,] . .   . . . .   .   .   .   .\n[3,] . .   . . . .   .   .   3.7 .\n[4,] . .   . . . 4.6 .   .   .   .\n[5,] . .   . . . .   5.3 .   .   .\n[6,] . .   . . . .   .   5.9 .   .\n[7,] . .   . . . .   .   .   6.5 .\n[8,] . .   . . . .   .   .   .   7\n\nEigen\nEigen é uma biblioteca de C++ para álgebra linear: matrizes, vetores, solucionadores numéricos e algoritmos relacionados. Ela suporta matrizes densas e esparsas em números inteiros (int), de ponto flutuante (float e double) e complexos (complex), decomposições de matrizes e soluções de sistemas lineares. Seu desempenho em muitos algoritmos é comparável a algumas das melhores implementações baseadas em LAPACK e BLAS (exemplo Armadillo).\nEigen não tem nenhuma dependência externa, apenas da biblioteca padrão C++11 STL (que todo compilador C++ dá suporte). Além disso, Eigen usa o sistema de build CMake, mas apenas para construir a documentação e os testes de unidade, e para automatizar a instalação. Se você deseja apenas usar o Eigen, pode usar os arquivos header imediatamente. Não há biblioteca binária para vincular e nenhum arquivo header configurado. Eigen é uma biblioteca pura definida nos headers.\nPor conta dessa simplicidade, facilidade de instalação (virtualmente sem dependências) e alta compatibilidade, eu prefiro Eigen ao invés de Armadillo. Além disso, nos meus benchmarks quase sempre Eigen é mais rápida que Armadillo2.\nPara Eigen recomendo as seguintes referências (todas do site do Eigen):\nGetting Started\nReferência Rápida de Matrizes/Vetores Densos\nDocumentação das Decomposições e Soluções Lineares de Matrizes/Vetores Densos\nReferência Rápida de Matrizes/Vetores Esparsas\nCatálogo de Operações Matemáticas de Elementos de Matrizes/Vetores Densos\nClasses do Eigen\nNa mesma pegada do Armadillo, Eigen possui algumas categorias de classes para representar diferentes objetos de álgebra linear.\nA classe Matrix lida com matrizes e vetores densos, não-esparsos. E a classe SparseMatrix lida com matrizes e vetores esparsos. Matrizes densas e vetores são arranjos comuns de elementos. Todos os elementos são armazenados em uma matriz contígua comum. Isso é diferente de matrizes e vetores esparsos, onde os elementos são armazenados como uma lista de elementos diferentes de zero.\nEigen é muito mais simples: tudo é Matrix ou SparseMatrix/SparseVector. Matrix aceita três argumentos de template (o que vai entre <>):\ntipo de escalar (ex, double)\nnúmero de linhas (um int ou Eigen::Dynamic)\nnúmero de colunas (um int ou Eigen::Dynamic)\nSparseMatrix e SparseVector também aceitam três argumentos de template (o que vai entre <>):\ntipo de escalar (ex, double)\nlógica de armazenamento (ColMajor ou RowMajor, o default é ColMajor)\ntipo de índice interno (default é int).\nAlém disso Eigen tem uma síntaxe bem elegante para atalhos de matrizes. A lógica desses atalhos é a seguinte Classe-Numero_de_Elementos-Tipo_Escalar. Veja alguns exemplos abaixo:\n// Matrizes Densas - Tamanho Fixo\nMatrix<double, 3, 3> // Especificação Completa\nMatrix3d             // Atalho\n\n// Matrizes Densas - Tamanho Dinâmico\nMatrix<double, Dynamic, Dynamic> // Especificação Completa\nMatrixXd                         // Atalho\n\n// Matrizes Esparsas (Sem Atalhos e sem Fixo/Dinâmico)\nSparseMatrix<double>\n\n// Vetores em Eigen são apenas Matrizes 1-D\n// Vetores Densos - Tamanho Fixo\nMatrix<double, 3, 1> // Vetor Coluna - Especificação Completa\nMatrix<double, 1, 3> // Vetor Linha - Especificação Completa\nVector3d             // Vetor Coluna - Atalho\nRowVector3d          // Vetor Linha - Atalho\n\n// Vetores Densos - Tamanho Dinâmico\nMatrix<double, Dynamic, 1> // Vetor Coluna - Especificação Completa\nMatrix<double, 1, Dynamic> // Vetor Linha - Especificação Completa\nVectorXd                   // Vetor Coluna - Atalho\nRowVectorXd                // Vetor Linha - Atalho\n\n// Vetores Esparsas (Sem Atalhos e sem Fixo/Dinâmico)\nEigen::SparseVector<double>\n\n// Alguns exemplos extras para entender a lógica dos Atalhos\nMatrix<float,Dynamic,Dynamic>  =   MatrixXf\nMatrix<double,Dynamic,1>       =   VectorXd\nMatrix<int,1,Dynamic>          =   RowVectorXi\nMatrix<float,3,3>              =   Matrix3f\nMatrix<float,4,1>              =   Vector4f\nTamanho Fixo vs Dinâmico\nInternamente, uma matriz Eigen de tamanho fixo é apenas um array simples de C++ alocada na pilha (stack) e tem custo zero de tempo de execução. Em contraste, o array C++ de uma matriz Eigen de tamanho dinâmico é sempre alocada na heap e armazena seu número de linhas e colunas como variáveis de membro (member variables).\nPara tamanhos grandes o suficiente, digamos, para tamanhos maiores que (aproximadamente) 32, o benefício de desempenho de usar tamanhos fixos torna-se insignificante. Pior, tentar criar uma matriz muito grande usando tamanhos fixos dentro de uma função pode resultar em um stack overflow, já que Eigen tentará alocar o array automaticamente como uma variável local, e isso normalmente é feito na pilha (stack). Finalmente, dependendo das circunstâncias, Eigen também pode ser mais agressivo tentando vetorizar (usar instruções SIMD) quando tamanhos dinâmicos são usados.\nMeu conselho: use sempre matrizes e vetores de tamanho dinâmico e seja feliz sabendo que na maioria das vezes eles serão mais rápidos que os de tamanho fixo.\nAcessando e Modificando Elementos\nO principal meio de acessar elementos e modificar do Eigen é pelo operador (). Para matrizes use dois índices (linha, coluna) e para vetores apenas use um índice (índice). Geralmente m é uma matriz e v é um vetor.\nm(0,0) = 3;\nv(0)   = 4;\nFatiando (Slice) Matrizes e Vetores\nTem várias maneiras de fatiar (slice) matrizes e vetores. Veja alguns exemplos:\n// Vetores\nv.head(n)\nv.tail(n)\nv.segment(pos,n)\n\n// Matriz\nm.block(i,j,rows,cols)\n\n// Matriz - Cantos (Corners)\nm.topLeftCorner(rows,cols)\nm.topRightCorner(rows,cols)\nm.bottomLeftCorner(rows,cols)\nm.bottomRightCorner(rows,cols)\nm.topRows(rows)\nm.bottomRows(rows)\nm.leftCols(cols)\nm.rightCols(cols)\nInicializando Matrizes e Vetores\nPor padrão os elementos de uma matriz não são inicializados na sua criação. Há algumas maneiras de inicializar os elementos de uma matriz ou vetor em Eigen:\nInicialização usando a vírgula (Comma Initialization)\nMatrix3f m;  // pode ser também MatrixXd\n\nm << 1, 2, 3,\n     4, 5, 6,\n     7, 8, 9;\nMatrizes especiais. Existem alguns métodos estáticos para todas as classes Matrix. Eles são apenas para tamanhos fixos.\n// Matriz com Zeros\nMatrix2d::Zero()\n\n// Matrizes Aleatórias\nMatrix2i::Random()\n\n// Matriz Identidade\nMatrix3d::Identity()\n\n// Vetores Espaçados Linearmente (size, low, high)\n// tipo um seq() do R\nVectorXf v;\nv.setLinSpaced(5,0.5f,1.5f);\nTamanho e Dimensões\nO tamanho atual de uma matriz pode ser recuperado por .rows(), .cols() e .size(). Esses métodos retornam o número de linhas, o número de colunas e o número de elementos, respectivamente. O redimensionamento de uma matriz de tamanho dinâmico é feito pelo método .resize().\nm.cols();\nm.rows();\nm.resize(4,4);\nOperações Aritméticas com Matrizes e Vetores\nTodos os vetores e matrizes de Eigen aceitam adição, subtração, multiplicação, divisão: +,-, *, /. Além disso, tem MUITAS outras operações e decomposições que podem ser feitas. Não vou listar todas aqui, consulte a documentação do Eigen.\nComo usar Eigen com {Rcpp} – {RcppEigen}\nPrimeiro, certifique-se que você possui a biblioteca Eigen instalada:\nLinux: sudo apt install libeigen3-dev\nMacOS: brew install eigen\nWindows: baixe no site do Eigen\nSegundo, installe o pacote {RcppEigen} para R.\nTerceiro, coloque em todo código que deseja usar o Eigen com {Rcpp} a seguinte síntaxe:\n#include <RcppEigen.h>\nusing namespace Eigen;\n\n// [[Rcpp::depends(RcppEigen)]]\nAtenção!: não usar o header do {Rcpp} (#include <Rcpp.h>), pois ele conflita com o header do {RcppEigen} (#include <RcppEigen.h>).\nPronto! É isso.\nConversões do {RcppEigen}\nO {RcppEigen} automaticamente converterá os tipos de retorno das funções na seguinte lógica:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#bwlmvbnigf .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bwlmvbnigf .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bwlmvbnigf .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bwlmvbnigf .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bwlmvbnigf .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bwlmvbnigf .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bwlmvbnigf .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bwlmvbnigf .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bwlmvbnigf .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bwlmvbnigf .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bwlmvbnigf .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bwlmvbnigf .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bwlmvbnigf .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#bwlmvbnigf .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bwlmvbnigf .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bwlmvbnigf .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bwlmvbnigf .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#bwlmvbnigf .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bwlmvbnigf .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#bwlmvbnigf .gt_left {\n  text-align: left;\n}\n\n#bwlmvbnigf .gt_center {\n  text-align: center;\n}\n\n#bwlmvbnigf .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bwlmvbnigf .gt_font_normal {\n  font-weight: normal;\n}\n\n#bwlmvbnigf .gt_font_bold {\n  font-weight: bold;\n}\n\n#bwlmvbnigf .gt_font_italic {\n  font-style: italic;\n}\n\n#bwlmvbnigf .gt_super {\n  font-size: 65%;\n}\n\n#bwlmvbnigf .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nTipo de Objeto R\n      Classe Eigen\n    numeric matrix\n\n      MatrixXd\n\n    integer matrix\n\n      MatrixXi\n\n    complex matrix\n\n      MatrixXcd\n\n    numeric vector\n\n      VectorXd\n\n    integer vector\n\n      VectorXi\n\n    complex vector\n\n      VectorXcd\n\n    Matrix::dgCMatrix\n\n      SparseMatrix<double>\n\n    \n\nComo usar Matrizes Esparsas no {RcppEigen}\nPara que {RcppEigen} nos retorne um objeto dgCMatrix, é simples: basta a função retornar um objeto Eigen::SparseMatrix<double>. Vou usar o mesmo exemplo de operação com matriz esparsa do {RcppArmadillo}:\n\n#include <RcppEigen.h>\nusing namespace Rcpp;\nusing namespace Eigen;\n\n// [[Rcpp::depends(RcppEigen)]]\n\n// [[Rcpp::export]]\nSparseMatrix<double> sqrt_eigen(SparseMatrix<double>& X) {\n  return X.cwiseSqrt();\n}\n\n\n\ni <- c(1,3:8)\np <- c(2,9,6:10)\nx <- 7 * (1:7)\nA <- sparseMatrix(i, p, x = x)\nsqrt_eigen(A)\n\n\n8 x 10 sparse Matrix of class \"dgCMatrix\"\n                                  \n[1,] . 2.6 . . . .   .   .   .   .\n[2,] . .   . . . .   .   .   .   .\n[3,] . .   . . . .   .   .   3.7 .\n[4,] . .   . . . 4.6 .   .   .   .\n[5,] . .   . . . .   5.3 .   .   .\n[6,] . .   . . . .   .   5.9 .   .\n[7,] . .   . . . .   .   .   6.5 .\n[8,] . .   . . . .   .   .   .   7\n\nBenchmarks\nEstá na hora de mais uma vez colocarmos o que vimos em prática. Além disso fazer alguns benchmarks de Eigen vs Armadillo.\nExemplo – Multiplicação de Matrizes\nNesse caso vamos comparar multiplicar duas matrizes em C++ usando o {Rcpp}, {RcppArmadillo} e {RcppEigen}\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericVector mat_mul(const NumericVector& A, const NumericVector& B) {\n  NumericVector C = A * B;\n\n  // dimensões para Vector virar Matrix no R\n  int dim = sqrt(A.length());\n  C.attr(\"dim\") = Dimension(dim, dim);\n\n  return C;\n}\n\n\n#include <RcppArmadillo.h>\nusing namespace Rcpp;\nusing namespace arma;\n\n// [[Rcpp::depends(RcppArmadillo)]]\n\n// [[Rcpp::export]]\nmat mat_mul_arma(const mat& A, const mat& B) {\n  return A * B;\n}\n\n\n#include <RcppEigen.h>\nusing namespace Rcpp;\nusing namespace Eigen;\n\n// [[Rcpp::depends(RcppEigen)]]\n\n// [[Rcpp::export]]\nMatrixXd mat_mul_eigen(const MatrixXd& A, const MatrixXd& B){\n  return A * B;\n}\n\n\n\nb1 <- bench::press(\n  n = 10^c(1:3),\n  {\n    X = matrix(rnorm(n * n), nrow = n)\n    bench::mark(\n      Rcpp = mat_mul(X, X),\n      arma = mat_mul_arma(X, X),\n      eigen = mat_mul_eigen(X, X),\n      check = FALSE,\n      relative = TRUE\n    )\n})\nb1\n\n\n# A tibble: 9 x 7\n  expression     n    min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 Rcpp          10   1      1         1.09         1     2.17\n2 arma          10   1.37   1.20      1            1     1   \n3 eigen         10   1.28   1.12      1.08         1     1.08\n4 Rcpp         100   1      1        69.5          1    87.7 \n5 arma         100  71.9   71.6       1            1     1   \n6 eigen        100  19.4   18.9       3.61         1     4.69\n7 Rcpp        1000   1      1       223.           1   Inf   \n8 arma        1000 585.   222.        1            1   NaN   \n9 eigen       1000 134.    51.2       4.31         1   NaN   \n\n\n\n\nFigure 2: Benchmarks de Multiplicação de Matriz: Rcpp vs Armadillo vs Eigen\n\n\n\nNo meu computador {RcppEigen} é mais rápido que {RcppArmadillo}, mas ambos são mais lentos que uma implementação simples com {Rcpp}.\nExemplo – Matriz Esparsa\nVamos usar mat_sparse criada que possui dimensão 1.000 x 1.000 e tomar a raiz quadrada de todos os elementos.\n\n\nb2 <- bench::mark(\n  arma = sqrt_eigen(mat_sparse),\n  eigen = sqrt_eigen(mat_sparse),\n  relative = TRUE\n)\nb2\n\n\n# A tibble: 2 x 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 arma        1      1.00      1         1.00     1   \n2 eigen       1.02   1         1.08      1        1.08\n\n\n\n\nFigure 3: Benchmarks de Matriz Esparsa: Armadillo vs Eigen\n\n\n\nNovamente Eigen é um pouco mais rápida que Armadillo, mas a diferença é pequena.\nExemplo – Regressão Linear fast_lm()\nEsse exemplo, originalmente do criador dos pacotes do ecossistema {Rcpp} Dirk Eddelbuettel na vinheta introdutória do {Rcpp}, é bem interessante. Aqui vamos aplicar uma regressão linear tanto em Armadillo quando em Eigen. Ambos usam o solve() que é um solucionador de sistemas de equações lineares3.\n\n#include <RcppArmadillo.h>\nusing namespace arma;\n\n// [[Rcpp::depends(RcppArmadillo)]]\n\n// [[Rcpp::export]]\nRcpp::List fast_lm_arma(const vec& y, const mat& X) {\n\n  int n = X.n_rows, k = X.n_cols;\n\n  colvec coef  = solve(X, y);\n  colvec resid = y - X*coef;\n\n  double sig2 = as_scalar(trans(resid)*resid/(n-k));\n  colvec stderrest = sqrt(sig2 * diagvec(inv(trans(X)*X)));\n\n  return Rcpp::List::create(Rcpp::Named(\"coefficients\") = coef,\n                            Rcpp::Named(\"stderr\")       = stderrest);\n}\n\n\n#include <RcppEigen.h>\nusing namespace Eigen;\n\n// [[Rcpp::depends(RcppEigen)]]\n\n// [[Rcpp::export]]\nRcpp::List fast_lm_eigen(const VectorXd& y, const MatrixXd& X) {\n\n  int n = X.rows(), k = X.cols();\n\n    // Usando SVD Decomposition\n    //VectorXd coef = X.bdcSvd(ComputeThinU | ComputeThinV).solve(y);\n\n    // Usando QR Decomposition\n    //VectorXd coef = X.colPivHouseholderQr().solve(y);\n\n    // Usando Normal Equations com LDL Decomposition (mais rápida)\n    VectorXd coef = (X.transpose() * X).ldlt().solve(X.transpose() * y);\n\n    VectorXd resid = y - X*coef;\n\n    double sig2 = resid.squaredNorm() / (n - k);\n\n  VectorXd stderrest = (sig2 * ((X.transpose() * X).inverse()).diagonal()).array().cwiseSqrt();\n\n    return Rcpp::List::create(Rcpp::Named(\"coefficients\") = coef,\n                            Rcpp::Named(\"stderr\")       = stderrest);\n}\n\n\n\ny <- log(trees$Volume)\nX <- cbind(1, log(trees$Girth))\nb3 <- bench::mark(\n  R = lm(y ~ X),\n  arma = fast_lm_arma(y, X),\n  eigen = fast_lm_eigen(y, X),\n  check = FALSE,\n  relative = TRUE\n)\nb3\n\n\n# A tibble: 3 x 6\n  expression    min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 R          117.   114.         1        191.      Inf\n2 arma         1.50   1.40      72.2        1       NaN\n3 eigen        1      1        109.         1       Inf\n\n\n\n\nFigure 4: Benchmarks de Regressão Linear: R vs Armadillo vs Eigen\n\n\n\nTanto Eigen quanto Armadillo são rápidos! Quase 100x mais rápidos 🤯. Novamente a diferença entre Eigen e Armadillo é pequena.\nUsar {RcppArmadillo} ou {RcppEigen} no seu Pacote R\nEu recomendo usar o pacote {usethis} e seguir as instruções.\nusethis::use_rcpp_armadillo()\nusethis::use_rcpp_eigen()\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.4 (2021-02-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] dplyr_1.0.5  gt_0.2.2     Matrix_1.3-2\n\nloaded via a namespace (and not attached):\n [1] RcppEigen_0.3.3.9.1      tidyselect_1.1.0        \n [3] xfun_0.22                bslib_0.2.4             \n [5] purrr_0.3.4              lattice_0.20-41         \n [7] colorspace_2.0-0         vctrs_0.3.6             \n [9] generics_0.1.0           htmltools_0.5.1.1       \n[11] emo_0.0.0.9000           yaml_2.2.1              \n[13] utf8_1.1.4               rlang_0.4.10            \n[15] jquerylib_0.1.3          pillar_1.5.1            \n[17] glue_1.4.2               DBI_1.1.1               \n[19] jpeg_0.1-8.1             lifecycle_1.0.0         \n[21] stringr_1.4.0            munsell_0.5.0           \n[23] commonmark_1.7           gtable_0.3.0            \n[25] ragg_1.1.1               bench_1.1.1             \n[27] evaluate_0.14            knitr_1.31              \n[29] RcppArmadillo_0.10.2.2.0 parallel_4.0.4          \n[31] fansi_0.4.2              profmem_0.6.0           \n[33] highr_0.8                Rcpp_1.0.6              \n[35] scales_1.1.1             backports_1.2.1         \n[37] checkmate_2.0.0          jsonlite_1.7.2          \n[39] debugme_1.1.0            farver_2.1.0            \n[41] systemfonts_1.0.1        textshaping_0.3.2       \n[43] distill_1.2              ggplot2_3.3.3           \n[45] digest_0.6.27            stringi_1.5.3           \n[47] grid_4.0.4               cli_2.3.1               \n[49] tools_4.0.4              magrittr_2.0.1          \n[51] sass_0.3.1               tibble_3.1.0            \n[53] tidyr_1.1.3              crayon_1.4.1            \n[55] pkgconfig_2.0.3          downlit_0.2.1           \n[57] ellipsis_0.3.1           lubridate_1.7.10        \n[59] rstudioapi_0.13          assertthat_0.2.1        \n[61] rmarkdown_2.7            R6_2.5.0                \n[63] compiler_4.0.4          \n\n\napesar de eu achar Álgebra Linear fascinante e ter trocado alguns e-mails com Gilbert Strang.↩︎\nquando não é porque eu fiz alguma besteira não eficiente em Eigen e quando corrijo fica mais rápida.↩︎\npor debaixo dos panos há uma inversão otimizada de matriz.↩︎\n",
      "last_modified": "2021-03-12T08:01:45-03:00"
    },
    {
      "path": "4-RcppParallel.html",
      "title": "Paralelização -- `{RcppParallel}`",
      "description": "Como fazer seu código Rcpp ser ainda mais rápido\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nC++ em Paralelo – Biblioteca Intel TBB\nComo usar {Rcpp} em paralelo – {RcppParallel}\nComo usar {RcppParallel}\nQuantos Threads?\nparallelFor – Paralelizando Loops for\nparallelReduce – Paralelizando operações Reduce\n\nUsar {RcppParallel} no seu Pacote R\nAmbiente\n\n\n\nVimos que o {Rcpp} faz o seu código R ficar muito mais rápido. Tudo o que mostramos até agora foi usando apenas um único core/processador (single thread) do computador1. Agora imaginem o quão rápido seu código R pode ficar se você conseguir rodar {Rcpp} em paralelo 🤯!\n\n\n\nFigure 1: Código {Rcpp} rodando em paralelo: muito rápido!\n\n\n\nC++ em Paralelo – Biblioteca Intel TBB\nO Pacote {RcppParallel} usa a biblioteca TBB da Intel. TBB (Threading Building Blocks) é uma biblioteca de C++ desenvolvida pela Intel para programação paralela em processadores multi-core. Usando TBB, um cálculo é dividido em tarefas que podem ser executadas em paralelo. A biblioteca gerencia e agenda threads para executar essas tarefas.\nComo usar {Rcpp} em paralelo – {RcppParallel}\nPrimeiro, certifique-se que você possui a biblioteca TBB da Intel instalada:\nLinux: sudo apt install libtbb-dev\nMacOS: brew install tbb\nWindows: baixe no site da Intel\nSegundo, instale o pacote {RcppParallel} para R.\nTerceiro, coloque em todo código que deseja paralelizar com {RcppParallel} a seguinte síntaxe:\n#include <Rcpp.h>\n#include <RcppParallel.h>\nusing namespace Rcpp;\nusing namespace RcppParallel;\n\n//[[Rcpp::depends(RcppParallel)]]\nPronto! É isso.\nComo usar {RcppParallel}\nÉ possível implementar paralelização em diversas partes do seu código {Rcpp} com o {RcppParallel}. Aqui eu vou cobrir apenas os dois algoritmos paralelos do {RcppParallel}2:\nparallelFor: Este aqui é fácil de explicar. Qualquer loop for do seu código pode ser um bom candidato à paralelização.\nparallelReduce: Reduce é um algoritmo bem conhecido em ciências da computação. Reduce aplica um operação binária (como adição) em uma sequência definida de elementos, resultando em um único valor. O exemplo sum_of_squares do tutorial 2. Como incorporar C++ no R - {Rcpp} é uma aplicação de um Reduce3. Toda vez que você tiver essa situação você pode paralelizar com parallelReduce.\nAmbos os algortimos usam o struct Worker definido no código do {RcppParallel} que é uma interface para a biblioteca TBB.\nAlém disso {RcppParallel} usa duas classes, uma para vetores e outra para matrizes:\nRVector<T> – onde T é o tipo de variável (double, int etc.)\nRMatrix<T> – onde T é o tipo de variável (double, int etc.)\nQuantos Threads?\nAo carregar o {RcppParallel} é importante você designar o número de threads/cores que deseja que o código {RcppParallel} use para paralelização. Caso queira usar todos os seus threads/cores disponíveis, coloque como argumento parallel::detectCores() que retorna um número inteiro com todos os threads/cores disponíveis no seu computador. Aqui estou usando todos os threads/cores disponíveis: 12 threads/cores.\nSe não especificado, por padrão {RcppParallel} usa todos os threads/cores disponíveis.\n\n\nlibrary(Rcpp)\nlibrary(RcppParallel)\nsetThreadOptions(parallel::detectCores())\nprint(parallel::detectCores())\n\n\n[1] 12\n\nparallelFor – Paralelizando Loops for\nPara usar o parallelFor você deve criar um objeto Worker e definir um operador operator() desse objeto que será invocado pelo {RcppParallel} e roda em paralelo. Isso cria uma função com com o nome do objeto Worker que você criou4. Essa função toma como argumento um intervalo [começo, fim) e lida com todas as questões de segurança e travas de threads que são um porre bem complicadas de maneira automática. Note que o elemento fim do intervalo não é incluído no intervalo (mesmo padrão de comportamento dos iteradores end da biblioteca padrão C++11 STL).\nPara mais detalhes, consulte a documentação do parallelFor no site do {RcppParallel}.\nExemplo parallelFor – Raiz Quadrada de Elementos da Matriz.\nAqui vou usar o exemplo da documentação do parallelFor no site do {RcppParallel} de uma função paralela que cacula a raiz quadrada dos elementos de uma matriz. Adicionei alguns comentários para você entender o que está sendo feito. Além disso, há uma versão single-thread também que vamos testar desempenho.\n\n#include <Rcpp.h>\n#include <RcppParallel.h>\n#include <algorithm>\n\nusing namespace Rcpp;\nusing namespace RcppParallel;\n\n// [[Rcpp::depends(RcppParallel)]]\n\n// Criando um objeto Worker chamado SquareRoot\nstruct SquareRoot : public Worker\n{\n   // Variáveis Membro públicas\n   const RMatrix<double> input;\n   RMatrix<double> output;\n\n   // Construtor do Objeto Worker SquareRoot\n   SquareRoot(const Rcpp::NumericMatrix input, Rcpp::NumericMatrix output)\n      : input(input), output(output) {}\n\n   // Overload do operador () -- functor\n   void operator()(std::size_t begin, std::size_t end) {\n      std::transform(input.begin() + begin,\n                     input.begin() + end,\n                     output.begin() + begin,\n                     ::sqrt);\n   }\n};\n\n// Função que chama o Objeto Worker SquareRoot\n// [[Rcpp::export]]\nNumericMatrix parallelMatrixSqrt(NumericMatrix x) {\n\n  // Variável local output inicializada\n  NumericMatrix output(x.nrow(), x.ncol());\n\n  // Invocação do operador() do Objeto Worker SquareRoot\n  SquareRoot squareRoot(x, output);\n\n  // Paralelização do loop for\n  parallelFor(0, x.length(), squareRoot);\n\n  return output;\n}\n\n// Versão single-thread\n// [[Rcpp::export]]\nNumericMatrix matrixSqrt(NumericMatrix orig) {\n  NumericMatrix mat(orig.nrow(), orig.ncol());\n  std::transform(orig.begin(), orig.end(), mat.begin(), ::sqrt);\n  return mat;\n}\n\n\n\nset.seed(123)\nb1 <- bench::press(\n  n = 10^c(2:3),\n  {\n    X = matrix(rnorm(n * n), nrow = n)\n    bench::mark(\n      Rcpp = matrixSqrt(X),\n      RcppParallel = parallelMatrixSqrt(X),\n      check = FALSE,\n      relative = TRUE\n    )\n})\nb1\n\n\n# A tibble: 4 x 7\n  expression       n   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>   <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 Rcpp           100  3.14   3.33      1            1     1   \n2 RcppParallel   100  1      1         3.01         1     2.88\n3 Rcpp          1000  2.36   2.90      1            1     1   \n4 RcppParallel  1000  1      1         2.78         1     2.83\n\n\n\n\nFigure 2: Benchmarks de Raiz Quadrada de Elementos de Matriz: Rcpp vs RcppParallel\n\n\n\nUm ganho de 3x com paralelização.\nparallelReduce – Paralelizando operações Reduce\nReduce é um algoritmo bem conhecido em ciências da computação. Reduce aplica um operação binária (como adição) em uma sequência definida de elementos, resultando em um único valor. O exemplo sum_of_squares do tutorial 2. Como incorporar C++ no R - {Rcpp} é uma aplicação de um Reduce5. Toda vez que você tiver essa situação você pode paralelizar com parallelReduce.\nA lógica do parallelReduce é similar ao parallelFor. Primeiro ambos usam objetos Worker, com algumas diferenças:\nAqui você precisa de dois construtores no seu Worker: um padrão e um “divisor”. O construtor padrão pega os dados de entrada e inicializa qualquer valor que está sendo acumulado (por exemplo, inicializar uma soma para zero). O construtor de divisão é chamado quando o trabalho precisa ser dividido em outros threads - ele toma uma referência à instância da qual está sendo dividido e simplesmente copia o ponteiro para os dados de entrada e inicializa seu valor “acumulado” para zero.\nUm operador operator() que executa o trabalho. Isso funciona da mesma forma que o operador operator() em parallelFor, mas em vez de gravar em outro vetor ou matriz, ele normalmente acumula um valor.\nUm método de junção que compõe as operações de duas instâncias de trabalho que foram divididas anteriormente. Aqui, simplesmente combinamos o valor acumulado da instância à qual estamos sendo associados ao nosso.\nPara mais detalhes, consulte a documentação do parallelReduce no site do {RcppParallel}\nExemplo parallelReduce – Soma dos Quadrados\nVamos reutilizar o exemplo sum_of_squares do tutorial 2. Como incorporar C++ no R - {Rcpp}.\nSoma dos quadrados é algo que ocorre bastante em computação científica, especialmente quando estamos falando de regressão, mínimos quadrados, ANOVA etc. Vamos paralelizar a implementação ingênua que fizemos no tutorial 2. Como incorporar C++ no R - {Rcpp} com dois loops for. Lembrando que esta implementação será uma função que aceita como parâmetro um vetor de números reais (C++ double / R numeric) e computa a soma de todos os elementos do vetor elevados ao quadrado.\nAqui vamos inserir um std::accumulate() do header <numeric>.\nNovamente vou incluir comentários para o entendimento do que estamos fazendo no {RcppParallel}. Além disso, há uma versão single-thread também que vamos testar desempenho.\n\n#include <Rcpp.h>\n#include <RcppParallel.h>\n#include <algorithm>\nusing namespace RcppParallel;\nusing namespace Rcpp;\n\n// [[Rcpp::depends(RcppParallel)]]\n\n// [[Rcpp::plugins(\"cpp11\")]]\n// [[Rcpp::plugins(\"cpp2a\")]]\n\n// Criando um objeto Worker chamado sum_of_squares\nstruct sum_of_squares : public Worker\n{\n  // Variáveis Membro públicas\n  const RVector<double> input;\n  double value;\n\n  // Construtor padrão do Objeto Worker\n  sum_of_squares(const NumericVector input) : input(input), value(0) {}\n\n  // Construtor \"divisor\"\n  sum_of_squares(const sum_of_squares& sum, Split) : input(sum.input), value(0) {}\n\n  // Overload do operador ()\n  void operator()(std::size_t begin, std::size_t end) {\n      value += std::accumulate(input.begin() + begin,\n                               input.begin() + end,\n                               0.0,\n                               [] (auto i, auto j) {return i + (j * j);});\n   }\n\n  void join(const sum_of_squares& rhs) {\n      value += rhs.value;\n   }\n};\n\n// Função que chama o Objeto Worker sum_of_squares\n// [[Rcpp::export]]\ndouble parallel_sum_of_squares(NumericVector x) {\n   // variável local inicializada\n   sum_of_squares sum(x);\n\n   // Paralelização do Reduce\n   parallelReduce(0, x.length(), sum);\n\n   return sum.value;\n}\n\n// Versão single-thread\n// [[Rcpp::export]]\ndouble sum_of_squares(NumericVector x) {\n   return std::accumulate(x.begin(),\n                          x.end(),\n                          0.0,\n                          [] (auto i, auto j) {return i + (j * j);});\n}\n\n\n\nb2 <- bench::press(\n  n = 10^c(4:6),\n  {\n    v = rnorm(n)\n    bench::mark(\n      Rcpp = sum_of_squares(v),\n      RcppParallel = parallel_sum_of_squares(v),\n      check = FALSE,\n      relative = TRUE\n    )\n  })\nb2\n\n\n# A tibble: 6 x 7\n  expression         n   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>     <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 Rcpp           10000  1.27   1         1.13         1      NaN\n2 RcppParallel   10000  1      1.15      1            1      Inf\n3 Rcpp          100000  4.82   3.84      1            1      NaN\n4 RcppParallel  100000  1      1         3.81         1      Inf\n5 Rcpp         1000000  8.96   8.13      1            1      NaN\n6 RcppParallel 1000000  1      1         8.34         1      NaN\n\n\n\n\nFigure 3: Benchmarks de Soma dos Quadrados: Rcpp vs RcppParallel\n\n\n\nMais um sucesso! Ganho de 8x 🤯 com paralelização.\nUsar {RcppParallel} no seu Pacote R\nAs instruções abaixo foram retiradas da documentação do {RcppParallel}.\nSe você deseja usar {RcppParallel} de dentro de um pacote R, você precisa editar vários arquivos para criar os links de construção e tempo de execução necessários. As seguintes adições devem ser feitas:\nNo DESCRIPTION:\nImports: RcppParallel\nLinkingTo: RcppParallel\nSystemRequirements: GNU make\nNo NAMESPACE:\nimportFrom(RcppParallel, RcppParallelLibs)\nNo src\\Makevars:\nCXX_STD = CXX11\nPKG_LIBS += $(shell ${R_HOME}/bin/Rscript -e \"RcppParallel::RcppParallelLibs()\")\nNo src\\Makevars.win:\nCXX_STD = CXX11\nPKG_CXXFLAGS += -DRCPP_PARALLEL_USE_TBB=1\n\nPKG_LIBS += $(shell \"${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe\" \\\n              -e \"RcppParallel::RcppParallelLibs()\")\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.4 (2021-02-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] RcppParallel_5.0.3 Rcpp_1.0.6        \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.0  xfun_0.22         bslib_0.2.4      \n [4] purrr_0.3.4       colorspace_2.0-0  vctrs_0.3.6      \n [7] generics_0.1.0    htmltools_0.5.1.1 emo_0.0.0.9000   \n[10] yaml_2.2.1        utf8_1.1.4        rlang_0.4.10     \n[13] jquerylib_0.1.3   pillar_1.5.1      glue_1.4.2       \n[16] DBI_1.1.1         lifecycle_1.0.0   stringr_1.4.0    \n[19] munsell_0.5.0     gtable_0.3.0      ragg_1.1.1       \n[22] bench_1.1.1       evaluate_0.14     knitr_1.31       \n[25] parallel_4.0.4    fansi_0.4.2       profmem_0.6.0    \n[28] highr_0.8         scales_1.1.1      jsonlite_1.7.2   \n[31] debugme_1.1.0     farver_2.1.0      systemfonts_1.0.1\n[34] textshaping_0.3.2 distill_1.2       ggplot2_3.3.3    \n[37] digest_0.6.27     stringi_1.5.3     dplyr_1.0.5      \n[40] grid_4.0.4        cli_2.3.1         tools_4.0.4      \n[43] magrittr_2.0.1    sass_0.3.1        tibble_3.1.0     \n[46] tidyr_1.1.3       crayon_1.4.1      pkgconfig_2.0.3  \n[49] downlit_0.2.1     ellipsis_0.3.1    lubridate_1.7.10 \n[52] assertthat_0.2.1  rmarkdown_2.7     rstudioapi_0.13  \n[55] R6_2.5.0          compiler_4.0.4   \n\n\ntecnicamente, Eigen e Armadillo podem, dependendo da configuração do sistema operacional, automaticamente se beneficiar de paralelizações usando o OpenMP.↩︎\na biblioteca TBB tem muito mais algoritmos complexos caso necessario. Recomendo você olhar este link da documentação do {RcppParallel}.↩︎\ntecnicamente é um MapReduce.↩︎\nmais questões técnicas: quando você define um operador operator() de um objeto em C++ você dá um overload no operador parenthesis do objeto e o resultado é uma síntaxe similar à uma função com o nome do objeto.↩︎\ntecnicamente é um MapReduce.↩︎\n",
      "last_modified": "2021-03-12T08:02:06-03:00"
    },
    {
      "path": "5-cpp11.html",
      "title": "`{cpp11}`",
      "description": "Nova Interface C++11 STL do pessoal do RStudio\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nPrincipais Motivações do {cpp11}\nComo usar {cpp11} no seu código C++\nTipos de Dados – {Rcpp} vs {cpp11}\nComo exportar funções {cpp11} para o ambiente R\nExemplo – Soma dos Quadrados\n{cpp11} e Rmarkdown\nUsar {cpp11} no seu pacote R\nAmbiente\n\n\n\nO {cpp11} é uma nova interface entre R e C++ desenvolvida pela equipe do RStudio.\nAinda é muito nova com apenas 13 links reversos de pacotes do CRAN, e com um total de 3.759.798 downloads (de 01/01/2016 à 31/12/2020).\nPrincipais Motivações do {cpp11}\nAs mudanças que motivaram {cpp11} incluem:\nAplicação da semântica de cópia na gravação (copy-on-write semantics).\nMelhorar a segurança de usar a API R a partir do código C++.\nSuporte a objetos ALTREP.\nPadrão de strings UTF-81 em todos os lugares.\nAplicação de recursos e funcionalidades C++11 STL mais novos.\nTer uma implementação mais simplese mais direta.\ntempo de compilação mais rápido com requisitos de memória mais baixos.\nSer completamente baseada em header (header-only).\nCapaz de vendoring, se desejado.\nMais robusta [proteção] (https://cpp11.r-lib.org/articles/motivations.html#protection) usando uma estrutura de dados de lista vinculada (linked list) muito mais eficiente.\nCrescimento de vetores de forma mais eficiente.\nComo usar {cpp11} no seu código C++\nA sistemática é bem similar ao {Rcpp} e bem simples também. Primeiro, instale o pacote {cpp11} no R.\nSegundo, includa no começo de todos seus arquivos .cpp e códigos C++:\n#include <cpp11.hpp>\nusing namespace cpp11;\nnamespace writable = cpp11::writable;\nTerceiro, para cada função que desejar ser exportada de volta ao ambiente de R, inclua o seguinte prefixo antes da definição da função:\n[[cpp11::register]] ReturnType functionName(){return x;}\nTipos de Dados – {Rcpp} vs {cpp11}\nO {cpp11} possui os mesmos tipos de dados que o {Rcpp}, mas ele permite um melhor controle pois conseguimos especificar o que é somente leitura e o que é “gravável” (writable). Além disso os headers são bem organizados e você não precisa trazer uma tralha toda que nem no {Rcpp}. Caso queira usar apenas strings use o header <cpp11/strings.hpp>. Abaixo uma tabela de referência de {Rcpp} vs {cpp11}.\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#jpsuqnhuuh .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#jpsuqnhuuh .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#jpsuqnhuuh .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#jpsuqnhuuh .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#jpsuqnhuuh .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#jpsuqnhuuh .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#jpsuqnhuuh .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#jpsuqnhuuh .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#jpsuqnhuuh .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#jpsuqnhuuh .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#jpsuqnhuuh .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#jpsuqnhuuh .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#jpsuqnhuuh .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#jpsuqnhuuh .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jpsuqnhuuh .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jpsuqnhuuh .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#jpsuqnhuuh .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#jpsuqnhuuh .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#jpsuqnhuuh .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#jpsuqnhuuh .gt_left {\n  text-align: left;\n}\n\n#jpsuqnhuuh .gt_center {\n  text-align: center;\n}\n\n#jpsuqnhuuh .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#jpsuqnhuuh .gt_font_normal {\n  font-weight: normal;\n}\n\n#jpsuqnhuuh .gt_font_bold {\n  font-weight: bold;\n}\n\n#jpsuqnhuuh .gt_font_italic {\n  font-style: italic;\n}\n\n#jpsuqnhuuh .gt_super {\n  font-size: 65%;\n}\n\n#jpsuqnhuuh .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nRcpp\n      cpp11 (somente leitura)\n      cpp11 (\"gravável\")\n      cpp11 header\n    NumericVector\n\n      doubles\n\n      writable::doubles\n\n      <cpp11/doubles.hpp>\n\n    IntegerVector\n\n      integers\n\n      writable::integers\n\n      <cpp11/integers.hpp>\n\n    CharacterVector\n\n      strings\n\n      writable::strings\n\n      <cpp11/strings.hpp>\n\n    RawVector\n\n      raws\n\n      writable::raws\n\n      <cpp11/raws.hpp>\n\n    List\n\n      list\n\n      writable::list\n\n      <cpp11/list.hpp>\n\n    RObject\n\n      sexp\n\n      -\n\n      <cpp11/sexp.hpp>\n\n    XPtr\n\n      -\n\n      external_pointer\n\n      <cpp11/external_pointer.hpp>\n\n    Environment\n\n      -\n\n      environment\n\n      <cpp11/environment.hpp>\n\n    Function\n\n      -\n\n      function\n\n      <cpp11/function.hpp>\n\n    Environment (namespace)\n\n      -\n\n      package\n\n      <cpp11/function.hpp>\n\n    wrap\n\n      -\n\n      as_sexp\n\n      <cpp11/as.hpp>\n\n    as\n\n      -\n\n      as_cpp\n\n      <cpp11/as.hpp>\n\n    stop\n\n      stop\n\n      -\n\n      <cpp11/protect.hpp>\n\n    \n\nAlém disso, na tabela abaixo é possível ver a comparação entre as escalares de R vs {cpp11}:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#chxulthexy .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#chxulthexy .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#chxulthexy .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#chxulthexy .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#chxulthexy .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#chxulthexy .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#chxulthexy .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#chxulthexy .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#chxulthexy .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#chxulthexy .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#chxulthexy .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#chxulthexy .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#chxulthexy .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#chxulthexy .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#chxulthexy .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#chxulthexy .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#chxulthexy .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#chxulthexy .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#chxulthexy .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#chxulthexy .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#chxulthexy .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#chxulthexy .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#chxulthexy .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#chxulthexy .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#chxulthexy .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#chxulthexy .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#chxulthexy .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#chxulthexy .gt_left {\n  text-align: left;\n}\n\n#chxulthexy .gt_center {\n  text-align: center;\n}\n\n#chxulthexy .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#chxulthexy .gt_font_normal {\n  font-weight: normal;\n}\n\n#chxulthexy .gt_font_bold {\n  font-weight: bold;\n}\n\n#chxulthexy .gt_font_italic {\n  font-style: italic;\n}\n\n#chxulthexy .gt_super {\n  font-size: 65%;\n}\n\n#chxulthexy .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nR\n      cpp11\n    numeric\n\n      double\n\n    integer\n\n      int\n\n    character\n\n      r_string\n\n    logical\n\n      bool\n\n    \n\nComo exportar funções {cpp11} para o ambiente R\n{cpp11} funciona quase que de maneira idêntica que o {Rcpp}, apenas a nomenclatura muda. {Rcpp} usa camelCase e {cpp11} usa snake_case. Veja abaixo ma tabela comparativa:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#vturoadajy .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vturoadajy .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vturoadajy .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vturoadajy .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vturoadajy .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vturoadajy .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vturoadajy .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vturoadajy .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vturoadajy .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vturoadajy .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vturoadajy .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vturoadajy .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vturoadajy .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vturoadajy .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vturoadajy .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vturoadajy .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vturoadajy .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#vturoadajy .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vturoadajy .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#vturoadajy .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vturoadajy .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#vturoadajy .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#vturoadajy .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vturoadajy .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vturoadajy .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#vturoadajy .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vturoadajy .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#vturoadajy .gt_left {\n  text-align: left;\n}\n\n#vturoadajy .gt_center {\n  text-align: center;\n}\n\n#vturoadajy .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vturoadajy .gt_font_normal {\n  font-weight: normal;\n}\n\n#vturoadajy .gt_font_bold {\n  font-weight: bold;\n}\n\n#vturoadajy .gt_font_italic {\n  font-style: italic;\n}\n\n#vturoadajy .gt_super {\n  font-size: 65%;\n}\n\n#vturoadajy .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nRcpp\n      cpp11\n    cppFunction()\n\n      cpp_function()\n\n    sourceCpp()\n\n      cpp_source()\n\n    \n\nExemplo – Soma dos Quadrados\nVamos reutilizar o exemplo sum_of_squares do tutorial 2. Como incorporar C++ no R - {Rcpp}.\nSoma dos quadrados é algo que ocorre bastante em computação científica, especialmente quando estamos falando de regressão, mínimos quadrados, ANOVA etc. Vamos comparar a função usando um std::acummulate de C+11 STL2 tanto no {Rcpp} quanto no {cpp11}. Lembrando que esta implementação será uma função que aceita como parâmetro um vetor de números reais (C++ double / R numeric) e computa a soma de todos os elementos do vetor elevados ao quadrado.\nPara ser uma comparação justa, vamos usar também do tutorial 2. Como incorporar C++ no R - {Rcpp}, a função sum_of_squares_rcpp_sugar() que usa {Rcpp} Sugar.\n\n#include <Rcpp.h>\n#include <numeric>\n\nusing namespace Rcpp;\n\n// [[Rcpp::plugins(\"cpp11\")]]\n\n// [[Rcpp::export]]\ndouble sum_of_squares_rcpp(NumericVector v){\n  double sum_of_elems = 0;\n\n  sum_of_elems += std::accumulate(v.cbegin(),\n                                  v.cend(),\n                                  0.0,\n                                  [] (double i, double j) {return i + (j * j);});\n  return sum_of_elems;\n}\n\n// [[Rcpp::export]]\ndouble sum_of_squares_rcpp_sugar(NumericVector v){\n  return(sum(v*v));\n}\n\n\n#include \"cpp11/doubles.hpp\"  // aqui usando somente o header doubles\n#include <numeric>\n\nusing namespace cpp11;\nnamespace writable = cpp11::writable;\n\n\n[[cpp11::register]] double sum_of_squares_cpp11(doubles v){\n  double sum_of_elems = 0;\n\n  sum_of_elems += std::accumulate(v.cbegin(),\n                                  v.cend(),\n                                  0.0,\n                                  [] (double i, double j) {return i + (j * j);});\n  return sum_of_elems;\n}\n\n\n\nset.seed(123)\nb1 <- bench::press(\n  n = 10^c(4:6),\n  {\n    v = rnorm(n)\n    bench::mark(\n      Rcpp = sum_of_squares_rcpp(v),\n      cpp11 = sum_of_squares_cpp11(v),\n      Rcppsugar = sum_of_squares_rcpp_sugar(v),\n      check = FALSE,\n      relative = TRUE\n)\n  })\nb1\n\n\n# A tibble: 9 x 7\n  expression       n   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>   <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 Rcpp         10000  1.02   1.02      1.12       Inf      NaN\n2 cpp11        10000  1.24   1.19      1          NaN      NaN\n3 Rcppsugar    10000  1      1         1.18       Inf      Inf\n4 Rcpp        100000  1.00   1         1.04       Inf      NaN\n5 cpp11       100000  1.03   1.03      1          NaN      NaN\n6 Rcppsugar   100000  1      1.00      1.03       Inf      NaN\n7 Rcpp       1000000  1      1.00      1.02       Inf      NaN\n8 cpp11      1000000  1.01   1.02      1          NaN      NaN\n9 Rcppsugar  1000000  1.00   1         1.02       Inf      Inf\n\n\n\n\nFigure 1: Benchmarks de Soma dos Quadrados: Rcpp vs cpp11\n\n\n\nQuando usada a biblioteca padrão C++11 STL tanto {cpp11} quanto {Rcpp} e {Rcpp} Sugar, pelo menos neste simples benchmark e no meu computador, possuem um desempenho similar para um vetor com function () , {, length(peek_mask(“n()”)$current_rows()), } elementos. É claro que solução do {Rcpp} Sugar é muito mais elegante e simples com uma única linha na função.\n{cpp11} e Rmarkdown\nNa mesma lógica de {Rcpp}, para usar o {cpp11} em documentos rmarkdown basta colocar cpp11 no chunk ao invés de r. Além disso é necessário instalar o pacote {decor}. Não esqueça de chamar um library(cpp11) no arquivo rmarkdown.\n\n\n\nFigure 2: {cpp11} no Rmarkdown\n\n\n\nUsar {cpp11} no seu pacote R\nPara adicionar {cpp11} a um pacote existente, coloque seus arquivos C++ no diretório src/ e adicione no arquivo DESCRIPTION:\nLinkingTo: cpp11\nA maneira mais fácil de configurar isso automaticamente é chamar usethis::use_cpp11() do pacote {usethis}.\nAntes de construir o pacote, você precisará executar cpp11::cpp_register(). Esta função verifica os arquivos C++ em busca de atributos [[cpp11::register]] e gera o código de ligação necessário para disponibilizar as funções em R. Execute novamente cpp11::cpp_register() sempre que as funções forem adicionadas, removidas ou seus nomes forem alterados. Se você estiver usando {devtools} para desenvolver seu pacote, isso é feito automaticamente pelo pacote {pkgbuild} quando seu pacote tem LinkingTo: cpp11 em seu arquivo DESCRIPTION.\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.4 (2021-02-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] gt_0.2.2    cpp11_0.2.6 dplyr_1.0.5\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.6        tidyr_1.1.3       png_0.1-7        \n [4] ps_1.6.0          assertthat_0.2.1  rprojroot_2.0.2  \n [7] digest_0.6.27     utf8_1.1.4        R6_2.5.0         \n[10] backports_1.2.1   evaluate_0.14     highr_0.8        \n[13] httr_1.4.2        ggplot2_3.3.3     pillar_1.5.1     \n[16] rlang_0.4.10      curl_4.3          rstudioapi_0.13  \n[19] callr_3.5.1       jquerylib_0.1.3   checkmate_2.0.0  \n[22] rmarkdown_2.7     textshaping_0.3.2 desc_1.3.0       \n[25] stringr_1.4.0     igraph_1.2.6      munsell_0.5.0    \n[28] compiler_4.0.4    xfun_0.22         pkgconfig_2.0.3  \n[31] systemfonts_1.0.1 htmltools_0.5.1.1 downlit_0.2.1    \n[34] tidyselect_1.1.0  tibble_3.1.0      fansi_0.4.2      \n[37] crayon_1.4.1      brio_1.1.1        commonmark_1.7   \n[40] crandep_0.1.1     grid_4.0.4        jsonlite_1.7.2   \n[43] gtable_0.3.0      lifecycle_1.0.0   DBI_1.1.1        \n[46] magrittr_2.0.1    scales_1.1.1      bench_1.1.1      \n[49] profmem_0.6.0     cli_2.3.1         stringi_1.5.3    \n[52] debugme_1.1.0     farver_2.1.0      xml2_1.3.2       \n[55] decor_1.0.0       bslib_0.2.4       ellipsis_0.3.1   \n[58] ragg_1.1.1        generics_0.1.0    vctrs_0.3.6      \n[61] distill_1.2       tools_4.0.4       cranlogs_2.1.1   \n[64] glue_1.4.2        purrr_0.3.4       processx_3.4.5   \n[67] parallel_4.0.4    yaml_2.2.1        colorspace_2.0-0 \n[70] rvest_1.0.0       knitr_1.31        sass_0.3.1       \n\n\no {Rcpp} também tem suporte nativo a strings UTF-8.↩︎\n{cpp11} ainda não possui suporte à funcionalidades de C++20 – std::transform_reduce().↩︎\n",
      "last_modified": "2021-03-12T08:02:25-03:00"
    },
    {
      "path": "6-Rcpp_CUDA.html",
      "title": "Usando `{Rcpp}` na GPU com `CUDA`",
      "description": "Como fazer seu código `{Rcpp}` rodar na GPU com NVIDIA `CUDA`\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nBiblioteca Thrust da NVIDIA\nInstalando e Habilitando o Thrust\nExemplo – Soma dos Quadrados\nSoma dos Quadrados usando Thrust\nSoma dos Quadrados usando Thrust\n\nAmbiente\n\n\n\nAlém de paralelização nos vários threads/cores da sua CPU, você pode paralelizar na sua placa gráfica GPU (se ela for NVIDIA e tiver o protocolo CUDA). Isso é possível pela biblioteca Thrust da NVIDIA.\n\n\n\nFigure 1: Código {Rcpp} rodando em paralelo na GPU\n\n\n\nBiblioteca Thrust da NVIDIA\nThrust é uma biblioteca de algoritmos paralelos que se assemelha à biblioteca padrão C++ STL. Thrust usa a interface CUDA da NVIDIA. CUDA, sigla para Compute Unified Device Architecture, é uma extensão para a linguagem de programação C, a qual possibilita o uso de computação paralela. A ideia por trás disso tudo é que programadores possam usar os poderes da unidade de processamento gráfico (GPU) para realizar algumas operações mais rapidamente.\nPara quase tudo da STL, é só você mudar alguns headers e o namespace de std:: para thrust::. Thrust fornece dois contêineres de vetor, thrust::host_vector e thrust::device_vector. Como os nomes sugerem, thrust::host_vector é armazenado na memória da CPU, enquanto thrust::device_vector vive na memória do dispositivo GPU. Os contêineres de vetor da Thrust são como std::vector no C++ STL. Como std::vector, thrust::host_vector e thrust::device_vector são recipientes genéricos (capazes de armazenar qualquer tipo de dados) que podem ser redimensionados dinamicamente.\nInstalando e Habilitando o Thrust\nO primeiro passo é instalar o Thrust. Ele vem automaticamente quando você instala o CUDA Toolkit da NVIDIA. Como vocês podem ver nesse Ubuntu eu tenho CUDA versão 11.0 (sendo que precisei instalar o g++-9 versão 9 que dá suporte ao nvcc da NVIDIA) e uma GeForce RTX 2060 com 6GB de RAM. Veja como instalar Thrust na documentação da NVIDIA-CUDA.\n\nnvidia-smi\nMon Jan 11 17:02:04 2021       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 450.102.04   Driver Version: 450.102.04   CUDA Version: 11.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  GeForce RTX 2060    Off  | 00000000:01:00.0 Off |                  N/A |\n| N/A   43C    P8     3W /  N/A |    321MiB /  5934MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A      3430      G   /usr/lib/xorg/Xorg                 66MiB |\n|    0   N/A  N/A      3878      G   /usr/bin/gnome-shell               10MiB |\n|    0   N/A  N/A    130028      C   ...tudio-server/bin/rsession      239MiB |\n+-----------------------------------------------------------------------------+\n\nO segundo passo é criar um plugin no {Rcpp}. Para isso, vamos ver o caminho do nvcc no meu sistema.\n\nwhich nvcc\n/usr/bin/nvcc\n\nCom esse caminho eu crio um plugin para {Rcpp} com a função registerPlugin(). Notem que estou usando o padrão C++17 (mais recente que g++-9 dá suporte).\n\n\nlibrary(Rcpp)\nthrust = function() {\n  list(\n    env = list(\n      MAKEFLAGS = paste(\n        \"CXX=/usr/bin/nvcc\",\n        \"CXXFLAGS=-x\\\\ cu\\\\ -g\\\\ -G\\\\ -O3 --std=c++17\",\n        \"CXXPICFLAGS=-Xcompiler\\\\ -fpic\\\\ -Xcudafe\\\\ --diag_suppress=code_is_unreachable\",\n        \"LDFLAGS=\"\n      ),\n      PKG_CXXFLAGS = paste0(\"-I\", here::here())\n    )\n  )\n}\n\nRcpp::registerPlugin(\"thrust\", thrust)\nls(envir=Rcpp:::.plugins)\n\n\n [1] \"cpp0x\"         \"cpp11\"         \"cpp14\"         \"cpp17\"        \n [5] \"cpp1y\"         \"cpp1z\"         \"cpp2a\"         \"cpp98\"        \n [9] \"openmp\"        \"thrust\"        \"unwindProtect\"\n\nTerceiro passo é colocar em qualquer parte do código CUDA o seguinte texto indicando que {Rcpp} deve usar o plugin thrust.\n// [[Rcpp::plugins(thrust)]]\nÉ isso! Um pouco mais difícil que os outros plugins que usamos até aqui porque tivemos que criá-lo do zero. Mas nada impossível.\nExemplo – Soma dos Quadrados\nVamos reutilizar o exemplo sum_of_squares do tutorial 2. Como incorporar C++ no R - {Rcpp}, agora comparando {RcppParallel} com a biblioteca Thrust da NVIDIA.\nSoma dos quadrados é algo que ocorre bastante em computação científica, especialmente quando estamos falando de regressão, mínimos quadrados, ANOVA etc. Vamos paralelizar a implementação ingênua que fizemos no tutorial 2. Como incorporar C++ no R - {Rcpp} com dois loops for. Lembrando que esta implementação será uma função que aceita como parâmetro um vetor de números reais (C++ double / R numeric) e computa a soma de todos os elementos do vetor elevados ao quadrado.\nAqui vamos inserir um std::accumulate() do header <numeric>.\nSoma dos Quadrados usando Thrust\nNovamente vou incluir comentários para o entendimento do que estamos fazendo no {RcppParallel}.\n\n\nlibrary(RcppParallel)\nsetThreadOptions(parallel::detectCores())\nprint(parallel::detectCores())\n\n\n[1] 12\n\n\n#include <Rcpp.h>\n#include <RcppParallel.h>\n#include <algorithm>\nusing namespace RcppParallel;\nusing namespace Rcpp;\n\n// [[Rcpp::depends(RcppParallel)]]\n\n// [[Rcpp::plugins(\"cpp11\")]]\n// [[Rcpp::plugins(\"cpp2a\")]]\n\n// Criando um objeto Worker chamado sum_of_squares\nstruct sum_of_squares : public Worker\n{\n  // Variáveis Membro públicas\n  const RVector<double> input;\n  double value;\n  \n  // Construtor padrão do Objeto Worker\n  sum_of_squares(const NumericVector input) : input(input), value(0) {}\n  \n  // Construtor \"divisor\"\n  sum_of_squares(const sum_of_squares& sum, Split) : input(sum.input), value(0) {}\n  \n  // Overload do operador ()  -- functor\n  void operator()(std::size_t begin, std::size_t end) {\n      value += std::accumulate(input.begin() + begin,\n                               input.begin() + end,\n                               0.0,\n                               [] (auto i, auto j) {return i + (j * j);});\n   }\n  \n  void join(const sum_of_squares& rhs) { \n      value += rhs.value; \n   }\n};\n\n// Função que chama o Objeto Worker sum_of_squares\n// [[Rcpp::export]]\ndouble parallel_sum_of_squares(NumericVector x) {\n   // variável local inicializada\n   sum_of_squares sum(x);\n   \n   // Paralelização do Reduce\n   parallelReduce(0, x.length(), sum);\n   \n   return sum.value;\n}\n\nSoma dos Quadrados usando Thrust\nNo arquivo SS_Thrust.cpp usamos os headers <thrust> e também chamamos os objetos Thrust com o namespace thrust::. std::acummulate() vira thrust::transform_reduce().\n\n\nwriteLines(readLines(\"SS_Thrust.cpp\"))\n\n\n#include <Rcpp.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/transform_reduce.h>\n\n// [[Rcpp::plugins(thrust)]]\n\n// [[Rcpp::export]]\ndouble thrust_sum_of_squares(Rcpp::NumericVector& v){\n  \n  // cria um device_vector na GPU copiando todos os elementos do NumericVector v\n  thrust::device_vector<double> dv(v.cbegin(), v.cend());\n  \n  double sum_of_squares = thrust::transform_reduce(dv.cbegin(),\n                                                   dv.cend(),\n                                                   thrust::square<double>(),\n                                                   0L,\n                                                   thrust::plus<double>());\n  return sum_of_squares;\n}\n\n\n\nsourceCpp(\"SS_Thrust.cpp\")\n\n\n\n\n\nset.seed(123)\nb1 <- bench::press(\n  n = 10^c(6:8),\n  {\n    v = rnorm(n)\n    bench::mark(\n      RcppParallel = parallel_sum_of_squares(v),\n      Thrust = thrust_sum_of_squares(v),\n      check = FALSE,\n      relative = TRUE\n    )\n  })\nb1\n\n\n# A tibble: 6 x 7\n  expression           n   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>       <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 RcppParallel   1000000   1      1        62.5         1      NaN\n2 Thrust         1000000  58.9   52.9       1           1      NaN\n3 RcppParallel  10000000   1      1        25.7         1      NaN\n4 Thrust        10000000  25.5   25.9       1           1      NaN\n5 RcppParallel 100000000   1      1        23.8         1      NaN\n6 Thrust       100000000  24.0   23.9       1           1      NaN\n\n\n\n\nFigure 2: Benchmarks de Soma dos Quadrados: RcppParallel vs CUDA\n\n\n\nNesse caso específico, Thrust é 20-30x mais lento que {RcppParallel}, mas em outros contextos um código altamente paralelizável ao ser executado na GPU com CUDA pode ser que o cenário se inverta.\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.10\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] cpp11_0.2.4        RcppParallel_5.0.2 Matrix_1.3-2      \n[4] dplyr_1.0.2        gt_0.2.2           Rcpp_1.0.5        \n\nloaded via a namespace (and not attached):\n [1] here_1.0.1               lubridate_1.7.9.2       \n [3] lattice_0.20-41          tidyr_1.1.2             \n [5] ps_1.5.0                 png_0.1-7               \n [7] assertthat_0.2.1         rprojroot_2.0.2         \n [9] digest_0.6.27            utf8_1.1.4              \n[11] R6_2.5.0                 backports_1.2.1         \n[13] evaluate_0.14            httr_1.4.2              \n[15] ggplot2_3.3.3            highr_0.8               \n[17] pillar_1.4.7             rlang_0.4.10            \n[19] curl_4.3                 rstudioapi_0.13         \n[21] callr_3.5.1              checkmate_2.0.0         \n[23] rmarkdown_2.6            desc_1.2.0              \n[25] stringr_1.4.0            RcppEigen_0.3.3.9.1     \n[27] igraph_1.2.6             munsell_0.5.0           \n[29] compiler_4.0.3           xfun_0.20               \n[31] pkgconfig_2.0.3          htmltools_0.5.0         \n[33] downlit_0.2.1            tidyselect_1.1.0        \n[35] tibble_3.0.4             bookdown_0.21           \n[37] emo_0.0.0.9000           fansi_0.4.1             \n[39] crayon_1.3.4             brio_1.1.0              \n[41] commonmark_1.7           crandep_0.1.1           \n[43] BH_1.72.0-3              grid_4.0.3              \n[45] jsonlite_1.7.2           gtable_0.3.0            \n[47] lifecycle_0.2.0          magrittr_2.0.1          \n[49] scales_1.1.1             bench_1.1.1             \n[51] cli_2.2.0                stringi_1.5.3           \n[53] profmem_0.6.0            farver_2.0.3            \n[55] RcppArmadillo_0.10.1.2.2 decor_1.0.0             \n[57] xml2_1.3.2               ellipsis_0.3.1          \n[59] generics_0.1.0           vctrs_0.3.6             \n[61] distill_1.1              cranlogs_2.1.1          \n[63] tools_4.0.3              glue_1.4.2              \n[65] purrr_0.3.4              jpeg_0.1-8.1            \n[67] processx_3.4.5           parallel_4.0.3          \n[69] yaml_2.2.1               colorspace_2.0-0        \n[71] rvest_0.3.6              knitr_1.30              \n[73] sass_0.2.0              \n\n\n\n\n",
      "last_modified": "2021-03-12T07:47:27-03:00"
    },
    {
      "path": "index.html",
      "title": "Rcpp - A interface entre R e C++",
      "description": "Como fazer seu código R ficar mais rápido com Rcpp\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nÍndice\nComo Configurar um Ambiente para {Rcpp}\nPacotes do ecossistema R + C++\nLicença\n\n\n\n\nOk, você quer fazer o seu código R rodar mais rápido? Já pensou em colocar partes do seu código em C++?\n\n\n\nFigure 1: R com C++ sem dúvida bate a marca dos 12 parsecs\n\n\n\nÍndice\nPor que C++? R não é suficiente?\nComo incorporar C++ no R – {Rcpp}\nManipulação de Matrizes – {RcppEigen} e {RcppArmadillo}\nParalelização – {RcppParallel}\n{cpp11} – Nova Interface do pessoal do RStudio\nUsando {Rcpp} na GPU com CUDA\nComo Configurar um Ambiente para {Rcpp}\nClaro, que primeiro você deve instalar o R pelo CRAN.\nLinux: Instale a versão desenvolvedor do R com sudo apt-get install r-base-dev ou similar\nMacOS: Instale o Xcode da App Store e execute o comando xcode-select --install para instalar o Xcode Command Line Tools\nWindows: Instale o Rtools\nPacotes do ecossistema R + C++\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#yykwgfpgpf .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#yykwgfpgpf .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#yykwgfpgpf .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#yykwgfpgpf .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#yykwgfpgpf .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#yykwgfpgpf .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#yykwgfpgpf .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#yykwgfpgpf .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#yykwgfpgpf .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#yykwgfpgpf .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#yykwgfpgpf .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#yykwgfpgpf .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#yykwgfpgpf .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#yykwgfpgpf .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yykwgfpgpf .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yykwgfpgpf .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#yykwgfpgpf .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#yykwgfpgpf .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yykwgfpgpf .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#yykwgfpgpf .gt_left {\n  text-align: left;\n}\n\n#yykwgfpgpf .gt_center {\n  text-align: center;\n}\n\n#yykwgfpgpf .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#yykwgfpgpf .gt_font_normal {\n  font-weight: normal;\n}\n\n#yykwgfpgpf .gt_font_bold {\n  font-weight: bold;\n}\n\n#yykwgfpgpf .gt_font_italic {\n  font-style: italic;\n}\n\n#yykwgfpgpf .gt_super {\n  font-size: 65%;\n}\n\n#yykwgfpgpf .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nTotal de Downloads do CRAN\n    \n    Pacote\n      Total de Downloads1\n      Links Reversos2,3\n    Rcpp\n\n      41,59M\n      2.386\n    BH\n\n      23,45M\n      273\n    RcppArmadillo\n\n      13,33M\n      886\n    RcppEigen\n\n      11,00M\n      303\n    cpp11\n\n      3,76M\n      13\n    RcppParallel\n\n      2,16M\n      86\n    \n        \n          1\n          \n           \n          Downloads entre 01/01/2016 e 31/12/2020.\n          \n        \n          2\n          \n           \n          Link reverso ocorre quando um pacote depende do código em C/C++ de outro.\n          \n        \n          3\n          \n           \n          Total em 12/03/2021.\n          \n      \n    \n\nLicença\nEste obra está licenciado com uma Licença Creative Commons Atribuição-CompartilhaIgual 4.0 Internacional.\n\n\n\n\n",
      "last_modified": "2021-03-12T08:02:43-03:00"
    },
    {
      "path": "README.html",
      "author": [],
      "contents": "\n\nContents\nEstatística com R\nProfessor\nComo usar esse conteúdo?\nPara configurar um ambiente local:\nPara usar na RStudio na nuvem gratuito\n\nPor que R?\nAulas\nConteúdos Principais\nConteúdos Auxiliares\n\nReferências\nLivros\nArtigos\n\nComo citar esse conteúdo\n\n\nEstatística com R\nDisciplina de Estatística da UNINOVE\nDisciplina do Mestrado e Doutorado da UNINOVE. O conteúdo todo consegue ser acessado num formato interativo aqui.\nProfessor\nProf. Dr. José Eduardo Storopoli - Currículo Lattes - ORCID - josees@uni9.pro.br\nProf. Dr. Leonardo Vils - Currículo Lattes - ORCID - leonardo.vils@uni9.pro.br\nComo usar esse conteúdo?\nEste conteúdo possui licença livre para uso. Caso queira utilizar o conteúdo para um curso ou estudos, por favor colabore nesse repositório quaisquer aprimorações que foram realizadas.\nPara configurar um ambiente local:\nClone o repositório do GitHub: git clone https://github.com/storopoli/Estatistica.git\nAcesse o diretório: cd Estatistica\nInstale os pacotes necessários: Rscript install.R\nPara usar na RStudio na nuvem gratuito\nClique aqui: \nPor que R?\nR é uma linguagem criada por estatísticos para estatísticos. Possui um vasto ecossistema de bibliotecas e é amplamente usado na ciência e em especial nas ciências aplicadas. Fizemos toda uma argumentação de porque você deve usar R aqui\nAulas\nConteúdos Principais\nComandos Básicos de R\n\\(p\\)-Valores, Hipóteses Nula e Pressupostos\nTeste de Hipóteses e Teste \\(t\\)\nAnálise de Variância (ANOVA)\nCorrelações\nRegressão Linear\nRegressão Logística\nConteúdos Auxiliares\nQuarteto de Anscombe\nDados Faltantes\nTamanho de Amostra e Tamanho de Efeito\nTabelas para Publicação\nReferências\nLivros\nDancey, Christine P.; Reidy, John; Viali, Lori (2013): Estatística sem matemática para psicologia. 5. ed. Porto Alegre, RS: Penso.\nHair, Joseph F.; Sant’Anna, Adonai Schlup; Gouvêa, Maria Aparecida (2009): Análise multivariada de dados. 6. ed. Porto Alegre: Bookman.\nLevin, Jack; Fox, James Alan; Forde, David R.; Ritter, Jorge; Bonafini, Fernanda (2014, 2012): Estatística para ciências humanas. 11. ed. São Paulo: Pearson Education do Brasil.\nCohen, J. (1988). Statistical power analysis for the behavioral sciences (2nd ed.). L. Erlbaum Associates.\nArtigos\nBásicos\nIoannidis, J. P. A. (2005). Why most published research findings are false. PLoS Medicine, 2(8), e124.\nIoannidis, J. P. A. (2019). What Have We (Not) Learnt from Millions of Scientific Papers with P Values? The American Statistician, 73(sup1), 20–25. https://doi.org/10.1080/00031305.2018.1447512\nCassidy, S. A., Dimova, R., Giguère, B., Spence, J. R., & Stanley, D. J. (2019). Failing Grade: 89% of Introduction-to-Psychology Textbooks That Define or Explain Statistical Significance Do So Incorrectly. Advances in Methods and Practices in Psychological Science, 2(3), 233–239. https://doi.org/10.1177/2515245919858072\nSmaldino, P. (n.d.). How to translate a verbal theory into a formal model. https://doi.org/10.31222/OSF.IO/N7QSH\nCumming, G. (2014). The New Statistics: Why and How. Psychological Science, 25(1), 7–29. https://doi.org/10.1177/0956797613504966\nBedeian, A. G. (2014). “More than meets the eye”: A guide to interpreting the descriptive statistics and correlation matrices reported in management research. Academy of Management Learning and Education, 13(1), 121–135. https://doi.org/10.5465/amle.2013.0001\nMurphy, K. R., & Aguinis, H. (2019). HARKing: How Badly Can Cherry-Picking and Question Trolling Produce Bias in Published Results? Journal of Business and Psychology, 34(1). https://doi.org/10.1007/s10869-017-9524-7\nWasserstein, R. L., & Lazar, N. A. (2016). The ASA’s Statement on p-Values: Context, Process, and Purpose. American Statistician, 70(2), 129–133. https://doi.org/10.1080/00031305.2016.1154108\nGreenland, S., Senn, S. J., Rothman, K. J., Carlin, J. B., Poole, C., Goodman, S. N., & Altman, D. G. (2016). Statistical tests, P values, confidence intervals, and power: a guide to misinterpretations. European Journal of Epidemiology, 31(4), 337–350. https://doi.org/10.1007/s10654-016-0149-3\nSmaldino, P. E. (2017). Models Are Stupid, and We Need More of Them. In Computational Social Psychology (Issue March, pp. 311–331). Routledge. https://doi.org/10.4324/9781315173726-14\nStark, P. B., & Saltelli, A. (2018). Cargo-cult statistics and scientific crisis. Significance, 15(4), 40–43. https://doi.org/10.1111/j.1740-9713.2018.01174.x\nKerr, N. L. (1998). HARKing: Hypothesizing after the results are known. Personality and Social Psychology Review, 2(3), 196–217. https://doi.org/10.1207/s15327957pspr0203_4\nWhetten, D. A. (2009). Modeling theoretical propositions. In Designing research for publication (pp. 217–250).\nComplementares\nEtz, A. (2019). Technical Notes on Kullback-Leibler Divergence. https://doi.org/10.31234/OSF.IO/5VHZU\nPearl, J. (2014). Comment: Understanding Simpson’s Paradox. The American Statistician, 68(1), 8–13. https://doi.org/10.1080/00031305.2014.876829\nGelman, A., & Vehtari, A. (2020). What are the most important statistical ideas of the past 50 years? https://arxiv.org/abs/2012.00174\nAguinis, H., Edwards, J. R., & Bradley, K. J. (2017). Improving Our Understanding of Moderation and Mediation in Strategic Management Research. Organizational Research Methods, 20(4), 665–685. https://doi.org/10.1177/1094428115627498\nAguinis, H., Gottfredson, R. K., & Joo, H. (2013). Best-Practice Recommendations for Defining, Identifying, and Handling Outliers. In Organizational Research Methods (Vol. 16, Issue 2, pp. 270–301). https://doi.org/10.1177/1094428112470848\nWilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L., & Teal, T. K. (2017). Good enough practices in scientific computing. PLOS Computational Biology, 13(6), e1005510. https://doi.org/10.1371/journal.pcbi.1005510\nTierney, N. J., & Ram, K. (2020). A Realistic Guide to Making Data Available Alongside Code to Improve Reproducibility. https://arxiv.org/abs/2002.11626\nComo citar esse conteúdo\nPara citar o conteúdo use:\nStoropoli & Vils (2021, Jan. 11). Estatística com R. Retrieved from https://storopoli.io/Estatistica\nOu em formato BibTeX para LaTeX:\n@misc{storopoli2021estatisticaR,\n  author = {Storopoli, Jose and Vils, Leonardo},\n  title = {Estatística com R},\n  url = {https://storopoli.io/Estatistica},\n  year = {2021}\n}\n\n\n",
      "last_modified": "2021-03-12T08:02:43-03:00"
    }
  ],
  "collections": []
}
