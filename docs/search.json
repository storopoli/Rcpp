{
  "articles": [
    {
      "path": "1-Porque_CPP.html",
      "title": "Por que C++? R não é suficiente?",
      "description": "Mostrar os Benefícios de C++ e quando usá-lo no seu código R\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nLinguagems Dinâmicas vs Estáticas\nO quão lento R é comparado à C++?\nExemplo - Simples Função de Soma\nExemplo - Amostrador de Gibbs\n\nSobrevoo de C++\nHistória do C++\nTipos de Variáveis – R vs C++\nO qualificador – const\nReferências – &\nFuncões em C++\n\nLoops for em C++\nLoops while em C++\nDesvios condicionais if, else if e else em C++\nCasos condicionais switch\nQuando usar C++ no seu código R?\nO que mais existe em C++?\n\n\n\nLinguagems Dinâmicas vs Estáticas1\nGeralmente as linguaguens de programação são categorizadas entre linguagens dinamicamente tipadas ou estaticamente tipadas.\nO R é uma liguagem dinamicamente tipada. Isso quer dizer que os tipos das variáveis e dados não são declarados no código e, portanto, conhecidos/checados somente em tempo de execução. Além do R, Ruby, Python e Clojure também são exemplos de linguagens dinamicamente tipadas. A principal vantagem de uma linguagem dinamicamente tipada é a sua agilidade: você se torna mais produtivo e o código mais enxuto, mas isto vem com um custo. A principal desvantagem é que linguagems dinamicamente tipadas são bem mais lentas em tempo de execução.\nO C++ é uma linguagem estaticamente tipada. Isso quer dizer que os tipos das variáveis e dos dados são explicitamente definidos no código e, portanto, conhecidos/checados em tempo de compilação. Além de C++, Java, C#, F#, Kotlin e Go são exemplos de linguagens estaticamente tipadas. A principal vantagem de uma linguagem estaticamente tipada é a sua velocidade em tempo de execução. Sua principal desvantagem é a rigidez: você se torna menos produtivo e o código muito mais verboso.\nO quão lento R é comparado à C++?\nNão conseguimos definir um índice preciso de comparação de tempo de execução entre R, C++ ou qualquer outra linguagem de programação. Isto varia muito conforme aplicação, sistema operacional e tamanho dos dados.\nExemplo - Simples Função de Soma\nComo primeiro exemplo, imagine uma função que soma três números inteiros e retorna o valor da soma. Vamos chamar essa função de add() e compararemos o tempo de execução dessa função em R addR() e em C++ addCpp():\n\n\naddR <- function(x, y, z) {\n    result <- x + y + z\n    return(result)\n}\n\naddR(10, 17, 31)\n\n\n[1] 58\n\n\n\nlibrary(\"Rcpp\")\ncppFunction(\"\nint addCpp(int x, int y, int z){\n   int result = x + y + z;\n   return result;\n}\")\n\naddCpp(10, 17, 31)\n\n\n[1] 58\n\nComparando tempo de execução (em ns) com a função mark() do pacote {bench}:\n\n\nbench::mark(\n  R   = addR(10, 17, 31),\n  Cpp = addCpp(10, 17, 31),\n  time_unit = \"ns\"\n)\n\n\n# A tibble: 2 x 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl> <bch:byt>    <dbl>\n1 R           604.   672.  1426026.    3.81MB        0\n2 Cpp        1485.  3039.   369986.   29.76KB        0\n\nAqui vocês vem que C++ não tem nenhuma vantagem sobre R: é mais verboso, chato de escrever e ainda é mais lenta!\nExemplo - Amostrador de Gibbs\nComo segundo exemplo vamos fazer algo mais computacionalmente intensivo. Para quem não conhece, Amostrador de Gibbs (Gibss Sampler) é um algoritmo de aproximação de uma distribuição probabilística multivariada que usa Método de Montecarlo com correntes Markov; e é primariamente utilizado em casos quando amostragem direta não é possível. Este exemplo foi retirado do blog do Dirk Eddelbuettel mantenedor do ecossitema {Rcpp} de pacotes de interfaces entre R e C++.\nO código em R é assim:\n\n\ngibbsR <- function(N, thin) {\n  mat <- matrix(nrow = N, ncol = 2)\n  x <- y <- 0\n\n  for (i in 1:N) {\n    for (j in 1:thin) {\n      x <- rgamma(1, 3, y * y + 4)\n      y <- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))\n    }\n    mat[i, ] <- c(x, y)\n  }\n  return(mat)\n}\n\n\n\nAgora o código em C++ (não se preocupe agora com os Rcpp que aparecem no código, isto será explicado na segunda parte desse tutorial):\n\n\nsourceCpp(code = \n\"#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericMatrix gibbsCpp(int N, int thin) {\n  NumericMatrix mat(N, 2);\n  double x = 0, y = 0;\n\n  for(int i = 0; i < N; i++) {\n    for(int j = 0; j < thin; j++) {\n      x = rgamma(1, 3, 1 / (y * y + 4))[0];\n      y = rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))[0];\n    }\n    mat(i, 0) = x;\n    mat(i, 1) = y;\n  }\n\n  return(mat);\n}\"\n)\n\n\n\nE vamos para o benchmark (em µs):\n\n\nbench::mark(\n  R = gibbsR(100, 10),\n  Cpp = gibbsCpp(100, 10),\n  check = FALSE,\n  time_unit = \"us\"\n)\n\n\n# A tibble: 2 x 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl> <bch:byt>    <dbl>\n1 R          3351.  3625.      255.    5.36MB     26.3\n2 Cpp         184.   199.     4887.     4.1KB     39.1\n\nNo meu computador gibbsCpp() executa 20x mais rápido que gibbsR()!\nSobrevoo de C++\nO foco aqui não é ensinar C++. Para isso recomendo você encontrar materiais e cursos que se conformem com o seu estilo de aprendizagem. Eu aprendi com um misto de quatro coisas:\nLivros:\nA Tour of C++: livro de 2018 do criador de C++, Bjarne Stroustrup. É bem conciso e recomendado para quem conhece alguma linguagem de programação orientada a objetos (ex: Python, Java, …).\nC++ Primer: uma das principais referências de C++. Está na quinta edição de 2011. É interessante para aprender o básico de C++ junto com uma introdução à biblioteca padrão (Standard Template Library – STL). Como C++ lança uma nova edição a cada 3 anos, esse livro não possui todas as novas funcionalidades de C++14, C++17 e C++20.\n\nReferências:\ncppreference.com: aqui está a bíblia de C++ totalmente atualizada. Para tudo o que você precisar vale a pena consultar aqui, mas ela é bem técnica. Necessário um certo nível de conhecimento básico em C++ para compreender.\ngeeksforgeeks.com: Geeks for Geeks é um site da Índia sobre programação com uma abordagem mais descontraída. A referência de C++ é bem mais “leve” que a cppreference. Vale a pena para ajudar a entender conceitos que você não tenha entendido pois tem exemplos interessantes.\n\nVídeos no YouTube:\nCppCon: a principal conferência anual sobre C++, todos os vídeos das sessões da conferência são disponibilizados gratuitamente no YouTube.\nCppNow: outra conferência anual sobre C++ com uma pegada mais descontraída e participação da platéia. O vídeo do Conor Hoekstra2 sobre Algorithm Intution é fenomenal.\nMeeting Cpp: outra conferência anual sobre C++, possui bons vídeos com uma pegada similar a CppNow.\nThe Cherno: Um ex-programador de jogos da EA. Ele tem uma didática excelente e eu recomendo a playlist C++ do seu canal.\n\nPodcasts:\nCppCast: podcast de entrevista com desenvolvedores e pessoas de destaque da comunidade C++. Sempre iniciam os episódios comentando com o entrevistado as últimas notícias do mundo C++ e programação em geral.\ncpp.chat: similar ao CppCast.\nADSP: este é um podcast novo e promissor. Seu nome ADSP significa Algorithms + Data Structures = Programs3 e um dos hosts é o Conor Hoekstra programador da NVIDIA e o palestrante do vídeo Algorithm Intution.\n\nHistória do C++\nA linguagem C++ é uma linguagem de programação orientada a objetos e é uma combinação de linguagem de baixo e alto nível – uma linguagem de nível médio. A linguagem de programação foi criada, projetada e desenvolvida por um cientista da computação dinamarquês – Bjarne Stroustrup da Bell Telephone Laboratories (agora conhecida como Nokia Bell Labs) em Murray Hill, New Jersey. Como ele queria uma linguagem flexível e dinâmica que fosse semelhante a C com todos os seus recursos, mas com adicionalidade de verificação de tipo ativa, herança básica, argumento de funcionamento padrão, classes, inlining, etc. e, portanto, C com Classes (C++) foi lançado .\n\n\n\nFigure 1: Bjarne Stroustrup. Figura de: www.wikipedia.org\n\n\n\nC++ era inicialmente conhecido como “C com classes” e foi renomeado C ++ em 1983. ++ é uma abreviação para adicionar um à variedade na programação; portanto, C++ significa aproximadamente que “um maior que C.” Em 1998, foi criado o comitê de padrões C++ que publicou o primeiro padrão internacional ISO para C++, que seria informalmente conhecido como C++98. A cada três anos o comitê de padrões de C++ publica um novo padrão internacional e esses adquirem o sufixo do ano. Até agora temos C++11, C++14, C++17, C++20 e propostas para serem incluídas no C++23.\nO padrão C++11 é importante, tanto que foi seu nome oficial é “o novo padrão C++”. A principal inovação é a biblioteca padrão de C++ (Standard Template Library – STL) que traz quatro componentes chamados algoritmos (algorithms), contêineres (containers), funções (functions) e iteradores (iterators). Os componentes, além de serem revolucionários (C++ pode ser considerado uma linguagem totalmente diferente depois do STL de C++11), são extremamente bem mantidos e documentados. A presença de bugs é quase nula fazendo com que todos os componentes sejam confiáveis e sempre funcionem da maneira que eles foram supostamente projetados para funcionar (a sonda da NASA em Marte possui seu software todo em C++).\nTipos de Variáveis – R vs C++\nOs principais tipos de variáveis de R e sua correspondência em C++ na tabela abaixo. Note que os nomes são bem similares.\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#roqrngaftx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#roqrngaftx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#roqrngaftx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#roqrngaftx .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#roqrngaftx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#roqrngaftx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#roqrngaftx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#roqrngaftx .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#roqrngaftx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#roqrngaftx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#roqrngaftx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#roqrngaftx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#roqrngaftx .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#roqrngaftx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#roqrngaftx .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#roqrngaftx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#roqrngaftx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#roqrngaftx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#roqrngaftx .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#roqrngaftx .gt_left {\n  text-align: left;\n}\n\n#roqrngaftx .gt_center {\n  text-align: center;\n}\n\n#roqrngaftx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#roqrngaftx .gt_font_normal {\n  font-weight: normal;\n}\n\n#roqrngaftx .gt_font_bold {\n  font-weight: bold;\n}\n\n#roqrngaftx .gt_font_italic {\n  font-style: italic;\n}\n\n#roqrngaftx .gt_super {\n  font-size: 65%;\n}\n\n#roqrngaftx .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nR\n      C++\n    logical\n\n      bool\n\n    integer\n\n      int\n\n    numeric\n\n      double\n\n    complex\n\n      complex\n\n    character\n\n      string\n\n    \n\nAlém disso, toda linha (instruções e declarações) de C++ deve ser encerrada com um ponto-e-vírgula ;.\nO qualificador – const\nC++ tem diversos tipos de modificadores e qualificadores de variáveis (ex: long, unsigned, volatile, static, etc.). Não vou cobrir todos eles, mas apenas um: const.\nconst significa constante (constant) e é um qualificador usado quando você declara explicitamente que a variável não mudará o seu valor (por mais paradoxal que isso soe…) durante toda a execução do código. Por exemplo se eu tenho um int chamado n_execucao que não mudará o seu valor:\nconst int n_execucao = 10;\nReferências – &\nCada variável que é criada em C++ (e na maioria das outras linguagems de programação) possui um endereço de memória que indica aonde a variável está localizada fisicamente na memória do computador. Esse endereço é como se fosse um código postal indicando aonde conseguimos encontrar a variável. Para criar uma referência usamos o símbolo &. Isto cria uma variável que é uma referência à outra variável e o valor de uma variável referência é o endereço da variável da qual ela referencia. Veja alguns exemplos (obs: // é como comentamos código em C++, equivalente ao # em R):\nint i = 5;  // variável int\nint& j = i; // variável j que é uma referência a i\n&i;         // endereço de memória da variável int i\ni++;        // incrementar i em 1\ni == j;     // TRUE\nj == 5;     // FALSE j agora possui o mesmo valor que i (6)\nPor que usar referências? Por dois motivos:\nPara evitar a cópia de objetos na memória: isso faz o código ficar mais eficiente.\nParamêtros de funções podem especificados por valor ou por referências. No caso de referências, isso é extremamente útil quando queremos alterar os valores dos parâmetros in-place pela função.\nFuncões em C++\nA figura 2 mostra a anatomia de uma função em C++. Ela é bem similar à estrutura de funções no R. Com duas notórias diferenças:\nTipo de Retorno: toda função em C++ deve especificar, antes do seu nome, o tipo de dado que é retornado pela função.\nValor de Retorno: toda função em C++ deve especificar explicitamente qual valor retornar com um return. No R podemos ser mais desleixados pois o valor de retorno será sempre a ultima declaração da função. Em C++ isto não funciona. A lógica de C++ é que a função termina quando ela atinge o primeiro return e retorna o dado/variável especificado(a).\n\n\n\nFigure 2: Anatomia de uma função em C++\n\n\n\nUsando valores vs referências como parâmetros\nÀs vezes é mais eficiente especificar um parâmetro como uma referência do que como um valor. Veja o caso abaixo de uma função simples de incremento de número inteiro. No primeiro caso, a função increment_val() usa o valor do parâmetro x. Isto implica na função gerar uma cópia de x no escopo local da função. Já no segundo caso, a função increment_ref() usa a referência do parâmetro x. Isto não implica em cópia de x, pois a função manipula o parâmetro x no escopo global.\nComo podem ver, nesse cenário simples temos um pequeno ganho, pelo tempo mediano de execução, ao usarmos o a referência como parâmetro. Claro que nesse exemplo a função é trivial, imaginem como essa diferença escalonaria para maior intensidade computacional ou maior entrada de dados. Sem contar que precisamos de ZERO coletor de lixo (garbage collection – gc), pois não estamos movendo/copiando nada para o escopo local da função.\n\n\ncppFunction(\n\"int increment_val(int x){ \n    x++;\n    return x;\n}\"\n)\n\ncppFunction(\n\"int increment_ref(int& x){ \n    x++;\n    return x;\n}\"\n)\n\nbench::mark(\n  value = increment_val(5),\n  reference = increment_ref(5)\n)\n\n\n# A tibble: 2 x 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 value        1.22µs   1.49µs   637788.    2.49KB      0  \n2 reference    1.18µs   1.44µs   573672.    2.49KB     57.4\n\nLoops for em C++\n\nObs: Em C++ todos os índices são baseados em zero. Ou seja, o primeiro elemento de uma array é array[0].\n\nOs loops for de C++ são similares ao de R. Eles seguem a seguinte síntaxe:\nfor (inicialização; condição; incremento) instrução;\nFunciona da seguinte maneira:\nA inicialização é executada. Geralmente, isso declara uma variável de contador (counter) e a define para algum valor inicial. Isso é executado uma única vez, no início do loop.\ncondição é verificada. Se for verdade, o loop continua; caso contrário, o loop termina e a instrução é ignorada, indo diretamente para a etapa 5.\ninstrução é executada. Como de costume, pode ser uma única instrução ou um bloco entre chaves {}.\nincremento é executado e o loop volta para a etapa 2.\no loop termina: a execução continua na próxima instrução após ela.\nVeja um exemplo4:\nfor (int i=0; i < 5; i++) {\n      cout << i << \"\\n\";\n    }\nC++11 introduziu uma funcionalidade chamada de range-for loop para ser usado com principalmente com os contêineres da C++11 STL, simplificando muito mais a síntaxe:\nfor (declaração : expressão)\n    instrução\ndeclaração - define uma variável. Deve ser possível converter cada elemento da sequência para o tipo da variável. A maneira mais fácil de garantir que os tipos correspondam é usar o especificador de tipo auto.\nexpressão - deve representar uma sequência, como uma lista de inicializadores entre chaves, um array ou um objeto como umvector ou string que tem membros begin e end que retornam iteradores.\nExemplo:\nvector<int> a {1, 2, 3, 4, 5};\n\nfor (auto i: a) {\n  cout << i << endl;\n}\nCompare com o for loop tradicional (muito mais verboso):\nvector<int> a {1, 2, 3, 4, 5};\n\nfor(int i=0; i < a.size(); i++){\n   cout << a[i] << endl;\n}\nLoops while em C++\nLoops while em C++ são quase que idênticos aos do R. Veja um exemplo:\nint i = 0;\n\nwhile (i < 10){\n    i++;\n    cout << i << \"\\n\";\n}\nDesvios condicionais if, else if e else em C++\nDesvios condicionais em C++ são também quase que idênticos aos do R. Veja um exemplo:\nint i = 2;\n\nif (i > 2) {\n    cout << i << \" é maior que 2\\n\";\n} else if (i == 2){\n    cout << i << \" é extamente igual a 2\\n\";\n} else {\n    cout << i << \" é menor que 2\\n\";\n}\nCasos condicionais switch\nOs casos condicionais usando o operador switch em C++ é também muito similar ao R. A única diferença é que ao invés de = temos : para especificar os casos, veja a síntaxe:\nswitch(i) {\n  case 1 : cout << '1';           // imprime \"1\"\n  case 2 : cout << '2';           // imprime \"2\"\n  default : cout << \"default\\n\";    // imprime \"default\"\n}\nQuando usar C++ no seu código R?\nOs gargalos típicos que C++ pode resolver incluem:\nLoops que não podem ser facilmente vetorizados porque as iterações subsequentes dependem das anteriores.\nFunções recursivas ou problemas que envolvem a chamada de funções milhões de vezes. A sobrecarga de chamar uma função em C++ é muito menor do que em R.\nProblemas que exigem estruturas de dados (contêineres) e algoritmos avançados que R não fornece. Por meio da biblioteca padrão (STL), C++ tem implementações eficientes de muitas estruturas de dados importantes, de mapas ordenados (ordered maps) a filas duplas (double-ended queues).\nEsses contextos são todos os cenários que C++ pode ajudar o seu código. “Nem mesmo os mais sábios sabem o fim de todos os caminhos”5.\n\n\n\nO que mais existe em C++?\nNesse breve sobrevoo de C++ a intenção é apenas possibilitar alguém que não tenha nenhum conhecimento em C++ à ser introduzido em alguns conceitos de C++, notoriamente focando em funções (eu acredito ser a principal razão de usarmos C++ em R – acelerar o tempo de execução de funcões). Usando uma analogia, esse sobrevoo permite o leitor “dirigir C++ por um estacionamento vazio”. Caso se interesse, C++ é uma linguagem EXTREMAMENTE rica e complexa. Veja os livros, referências, vídeos e podcasts que eu recomendei lá em cima.\n\nJulia é um caso a parte pois pode ser tanto codificada de maneira estática quando dinâmica, mas isso é assunto para outro tutorial.↩︎\num dos hosts do podcast ADSP.↩︎\nAlgoritmos + Estruturas de Dados = Programas.↩︎\naqui estamos usando o cout do <iostream>. Explicarei como printar mensagens no R usando C++ na segunda parte desse tutorial↩︎\num dos meus objetivos era incluir no mínimo uma referência de Star Wars (já feita no Home) e uma de Senhor dos Anéis↩︎\n",
      "last_modified": "2021-01-09T11:38:50-03:00"
    },
    {
      "path": "2-Rcpp.html",
      "title": "Como incorporar C++ no R -- `{Rcpp}`",
      "description": "Como usar o `{Rcpp}` para funções em C++ no R\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nCriando funções em C++ no R\nsourceCpp()\ncppFunction()\n\nComo exibir mensagens e erros em funções {Rcpp}\nCancelando a Execução no {Rcpp}\nTipos de Dados e Variáveis do {Rcpp}\n{Rcpp} – Vector\n{Rcpp} – Matrix\n{Rcpp} – List\n{Rcpp} – DataFrame\n\nExemplo – Multiplicação de Matrizes\nUsando a biblioteca padrão C++11 STL no {Rcpp}\n{Rcpp} e Rmarkdown\nUsar {Rcpp} no seu pacote R\nMateriais Adicionais de Consulta\n\n\n\nA maneira mais fácil e simples de usar código C++ no R é pelo pacote {Rccp}. O primeiro passo é importar o pacote:\n\n\nlibrary(Rcpp)\n\n\n\nCriando funções em C++ no R\nNo {Rcpp} é possível criarmos funções de duas maneiras1, sendo que ambas retornam as funções criadas em C++ para o ambiente do R:\nsourceCpp(): lê código C++ de um arquivo .cpp ou de uma string.\ncppFunction(): cria uma função C++ de uma string.\nsourceCpp()\nTodo código C++ que é utilizado pelo {Rcpp} deve começar com duas instruções no arquivo (ou string do código):\n#include <Rcpp.h>\nusing namespace Rcpp;\n#include <Rcpp.h> – indica que deve ser incluído o cabeçalho (header) do {Rcpp} no arquivo. Isto permite com que o código faça a interface com o R usando o {Rcpp}.\nusing namespace Rcpp; – importa todos os nomes que estão incluídos dentro da biblioteca {Rcpp}. Para os que tem TOC gostam de boas práticas, não é recomendável importar todos nomes de uma namespace em C++. Isto evita conflitos de nome. Caso queira usar algo de uma namespace você pode fazer de duas maneiras:\nNão importando a namespace e acessar o nome desejado da namespace com os quatro pontos (::). Exemplo:\nRcpp::List // toda vez que usar List tem que indicar que é o List do Rcpp.\nImportando apenas o nome desejado da namespace com o using. Exemplo:\nusing Rcpp::List;\nList  // toda vez que você digitar List C++ entende que é o List do Rcpp.\nAlém disso, para cada função que for criada no código C++ é necessário incluir o // [[Rcpp::export]] logo acima da função. Isto é necessário pois indica ao {Rcpp} que a função deve ser exportada de volta para uso no ambiente do R. No exemplo abaixo criei uma função addCpp() logo depois do Rcpp::export:\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n   int result = x + y + z;\n   return result;\n}\nHá duas maneiras de usar sourceCpp(): fornecendo um arquivo .cpp ou um código C++ como string.\nsourceCpp() – Usando um arquivo .cpp\nCriei um arquivo chamado addCpp.cpp com o código C++ pronto para ser usado pelo {Rcpp} com o sourceCpp(). Note que inclui um bloco de código R que automaticamente será executado após a compilação do arquivo. O ideal é inserir esses blocos de código R na parte final dos seus arquivos .cpp.\n\n\nwriteLines(readLines(\"addCpp.cpp\"))\n\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\n\n// Você pode incluir blocos de códigos de R em código C++\n// (útil para testagem e desenvolvimento). O código R será\n// automaticamente executado após a compilação.\n//\n\n/*** R\naddCpp(11, 21, 31)\n*/\n\n\n\nsourceCpp(file = \"addCpp.cpp\")\n\n\n\n> addCpp(11, 21, 31)\n[1] 63\n\nsourceCpp() – Usando uma string\nDa mesma maneira que usamos sourceCpp() para um arquivo .cpp, também é possível usar uma string em código C++. Abaixo o mesmo exemplo anterior, mas usando uma string:\n\n\nsourceCpp(code = \"\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\n/*** R\naddCpp(11, 21, 31)\n*/\n\")\n\n\n\n> addCpp(11, 21, 31)\n[1] 63\n\ncppFunction()\ncppFunction() faz a mesma coisa que sourceCpp(): retorna uma função criadas em C++ para o ambiente do R. Mas com uma pequena diferença: você pode omitir todas as intruções do {Rcpp} – o #include <Rcpp.h>, using namespase Rcpp; e // [[Rcpp::export]].\nUsarei o mesmo exemplo do sourceCpp(), sendo que agora não preciso mais incluir as instruções do {Rcpp}:\n\n\ncppFunction(\"\nint addCpp(int x, int y, int z){\n  int result = x + y + z;\n  return result;\n}\n\")\n\naddCpp(1, 2, 4)\n\n\n[1] 7\n\nComo exibir mensagens e erros em funções {Rcpp}\nTradicionalmente, em C++, usamos o cabeçalho <iostream> da C++11 STL para imprimir na tela mensagens (cout) e erros cerr:\n#include <iostream>\nusing std::cout;\nusing std::cerr;\n\ncout << \"Imprima algo na tela\\n\";\ncerr << \"Imprima um erro na tela\\n\";\nIsto não funciona muito bem quando executamos uma função C++ no R com o {Rcpp}. Para isso existem dois objetos na namespace Rcpp: Rcout e Rcerr. Veja um exemplo:\n\n\nwriteLines(readLines(\"teste_print.cpp\"))\n\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nvoid teste_print(){\n  Rcout << \"Imprima algo na tela\\n\";\n  Rcerr << \"Imprima um erro na tela\\n\";\n}\n\n/*** R\nteste_print()\n*/\n\n\n\nsourceCpp(\"teste_print.cpp\", showOutput = FALSE)\n\n\n\n> teste_print()\nImprima algo na tela\n\nCancelando a Execução no {Rcpp}\nA função CheckUserInterrupt() do {Rcpp} verifica se o botão ctrl + c foi pressionado e, se for pressionado, interromperá a execução da função.\nSe você quiser executar um cálculo que leve muito tempo, seria melhor executar checkUserInterrupt() aproximadamente uma vez a cada poucos segundos. Veja este exemplo de um loop for:\nfor (int i=0; i<100000; ++i) {\n    // Checando interrupção a cada 1000 iterações\n    if (i % 1000 == 0){\n        Rcpp::checkUserInterrupt();\n    }\n\n    // instruções do loop ...\n}\nTipos de Dados e Variáveis do {Rcpp}\nTemos sete tipos de variáveis que são usualmente usados no R: logical, integer, numeric,complex, character, Date e POSIXct. Sendo que esses sete tipos são usados no R para construir vetores (arrays 1-D) e matrizes (arrays 2-D). Apenas um lembrete:\n\n\nvec_int <- c(1L, 2L, 3L, 4L)\nstr(vec_int)\n\n\n int [1:4] 1 2 3 4\n\nmat_num <- matrix(c(1.1, 2.2, 3.3, 4.4), nrow = 2, ncol = 2)\nstr(mat_num)\n\n\n num [1:2, 1:2] 1.1 2.2 3.3 4.4\n\n{Rcpp} possui tipos de vetores e matrizes para representar correspondentemente aos do R.\nA tabela abaixo apresenta a correspondência dos tipos de dados entre R/{Rcpp}/C++:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#phyjbbggaw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#phyjbbggaw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#phyjbbggaw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#phyjbbggaw .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#phyjbbggaw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#phyjbbggaw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#phyjbbggaw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#phyjbbggaw .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#phyjbbggaw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#phyjbbggaw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#phyjbbggaw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#phyjbbggaw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#phyjbbggaw .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#phyjbbggaw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#phyjbbggaw .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#phyjbbggaw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#phyjbbggaw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#phyjbbggaw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#phyjbbggaw .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#phyjbbggaw .gt_left {\n  text-align: left;\n}\n\n#phyjbbggaw .gt_center {\n  text-align: center;\n}\n\n#phyjbbggaw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#phyjbbggaw .gt_font_normal {\n  font-weight: normal;\n}\n\n#phyjbbggaw .gt_font_bold {\n  font-weight: bold;\n}\n\n#phyjbbggaw .gt_font_italic {\n  font-style: italic;\n}\n\n#phyjbbggaw .gt_super {\n  font-size: 65%;\n}\n\n#phyjbbggaw .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nTipo de Variável\n      Vetor R\n      Vetor Rcpp\n      Matriz Rcpp\n      Escalar Rcpp\n      Escalar C++\n    Lógica\n\n      logical\n\n      LogicalVector\n\n      LogicalMatrix\n\n      -\n\n      bool\n\n    Inteiro\n\n      integer\n\n      IntegerVector\n\n      IntegerMatrix\n\n      -\n\n      int\n\n    Real\n\n      numeric\n\n      NumericVector\n\n      NumericMatrix\n\n      -\n\n      double\n\n    Complexo\n\n      complex\n\n      ComplexVector\n\n      ComplexMatrix\n\n      Rcomplex\n\n      complex\n\n    String\n\n      character\n\n      CharacterVector (StringVector)\n\n      CharacterMatrix (StringMatrix)\n\n      String\n\n      std::string\n\n    Date\n\n      Date\n\n      DateVector\n\n      -\n\n      Date\n\n      -\n\n    Datetime\n\n      POSIXct\n\n      DatetimeVector\n\n      -\n\n      Datetime\n\n      time_t\n\n    \n\nAlém de vetores e matrizes, {Rcpp} também possui as estrutura de dados correspondentes ao data.frame e list:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#dwdwjwbiox .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#dwdwjwbiox .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#dwdwjwbiox .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#dwdwjwbiox .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#dwdwjwbiox .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#dwdwjwbiox .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#dwdwjwbiox .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#dwdwjwbiox .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#dwdwjwbiox .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#dwdwjwbiox .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#dwdwjwbiox .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#dwdwjwbiox .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#dwdwjwbiox .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#dwdwjwbiox .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dwdwjwbiox .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dwdwjwbiox .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#dwdwjwbiox .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#dwdwjwbiox .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dwdwjwbiox .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#dwdwjwbiox .gt_left {\n  text-align: left;\n}\n\n#dwdwjwbiox .gt_center {\n  text-align: center;\n}\n\n#dwdwjwbiox .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#dwdwjwbiox .gt_font_normal {\n  font-weight: normal;\n}\n\n#dwdwjwbiox .gt_font_bold {\n  font-weight: bold;\n}\n\n#dwdwjwbiox .gt_font_italic {\n  font-style: italic;\n}\n\n#dwdwjwbiox .gt_super {\n  font-size: 65%;\n}\n\n#dwdwjwbiox .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nR\n      Rcpp\n    data.frame\n\n      DataFrame\n\n    list\n\n      List\n\n    \n\nNo {Rcpp}, Vector, DataFrame, List são todos implementados como tipos de vetores. Ou seja, Vector é um vetor em que seus elementos são valores escalares, DataFrame é um vetor em que seus elementos são Vector, List é um vetor em que seus elementos são qualquer tipo de tipo de dados. Portanto, Vector, DataFrame, List tem muitas funcionalidades em comum.\nMuito importante: {Rcpp} converterá qualquer tipo de retorno das funções para o seu respectivo tipo em R. Por exemplo, NumericVector será convertido para um vetor de numeric no R. Assim como LogicalMatrix será convertida para uma matriz de logical no R.\n{Rcpp} – Vector\nVector no {Rcpp} são arrays 1-D com tamanho dinâmico (não-estático). Note que Vector é um objeto dentro do namespace Rcpp.\nCriando Objetos de Vector\nVeja alguns exemplos de como criar objetos de Vector com o código em R correspondente comentado com //:\n// Crie um objeto Vector equivalente a\n// v <- rep(0, 3)\nNumericVector v (3);\n\n// v <- rep(1, 3)\nNumericVector v (3,1);\n\n// v <- c(1,2,3) \n// C++11 Inicialização em Lista\nNumericVector v = {1,2,3}; \n\n// v <- c(1,2,3)\nNumericVector v = NumericVector::create(1,2,3);\n\n// v <- c(x=1, y=2, z=3)\nNumericVector v =\nNumericVector::create(Named(\"x\",1), Named(\"y\")=2 , _[\"z\"]=3);\na função Rcpp::Named() é usada para criar vetores (e outros objetos) nomeados e há 3 variações conforme demonstrado acima.\nAcessando Elementos de Vector\nVocê pode acessar um elemento individual de um objeto Vector usando o operador [] ou ()2 Ambos os operadores aceitam NumericVector/IntegerVector (índice numérico), CharacterVector (nomes de elementos) e LogicalVector. O operador [] ignora o acesso fora do limite, enquanto o operador () lança uma exceção index_out_of_bounds.\nVocê pode também usar o método .names() do Vector para designar nomes ao elementos.\n// Criando o Vector v\nNumericVector v  {10,20,30,40,50};\n\n// Designando nomes dos elementos\nv.names() = CharacterVector({\"A\",\"B\",\"C\",\"D\",\"E\"});\n\n// Extraindo valores dos elementos de Vector\ndouble x1 = v[0];\ndouble x2 = v[\"A\"];\n\n// Designando valores aos elementos de Vector\nv[0]   = 100;\nv[\"A\"] = 100;\nMétodos de Vector\nAbaixo um exemplo dos principais métodos de Vector3. Lembrando que muitas dessas funcionalidades são compartilhadas com Matrix, List e DataFrame. Para uma lista completa dos métodos das classes de {Rcpp} recomendo a documentação não-oficial de {Rcpp} do James Balamuta (também conhecido como TheCoatlessProfessor).\nlength(), size()\nnames()\nfill(x)\nsort()\npush_back(x), push_front(x), insert(i, x), erase(i)\nOperações com Vector\nAlém de métodos, os elementos Vector possuem alguns operadores:\nadição, subtração, multiplicação, divisão: +,-, *, /\nigualdade e desigualdades: ==, !=, <, >, >=, <=\nnegação: !\n{Rcpp} – Matrix\nMatrix no {Rcpp} são arrays 2-D com tamanho estático. Note que Matrix é um objeto dentro do namespace Rcpp.\nA criação dos objetos Matrix é similar à criação de objetos Vector. Veja alguns exemplos de como criar objetos de Matrix com o código em R correspondente comentado com //:\n// Criação de um objeto Matrix equivalente a\n// m <- matrix(0, nrow=2, ncol=2)\nNumericMatrix m1( 2 );\n\n// m <- matrix(0, nrow=2, ncol=3)\nNumericMatrix m2( 2 , 3 );\nVocê pode acessar os elementos da mesma forma que Vector. Além disso, um objeto Matrix em R é na verdade um vetor cujo número de linhas e colunas é definido no atributo dim. Portanto, se você criar um vetor com o atributo dim em {Rcpp} e devolvê-lo a R, ele será tratado como uma matriz:\n// Criação de um objeto Vector\nNumericVector v = {1,2,3,4};\n\n// Designa o número de linhas e colunas no atributo dim do objeto Vector\nv.attr(\"dim\") = Dimension(2, 2);\n\n// Valor de retorno. Será tratado como uma matriz no R\nreturn v;\n{Rcpp} – List\nEm {Rcpp}, objetos List são implementados como uma espécie de Vector. Em outras palavras, Vector é um vetor cujo elemento é um valor escalar, enquanto List é um vetor cujos elementos são quaisquer tipos de dados. Portanto, Vector eList geralmente têm as mesmas funcionalidades.\nPara criar um objeto List, usamos a funçãoList::create(). Além disso, para especificar o nome do elemento ao criar List, use a função Named()ou _[]:\n// Criação de um objeto List L dos vetores v1, v2\nList L = List::create(v1, v2);\n\n// Criação atribuindo nomes aos elementos da Lista L\nList L = List::create(Named(\"nome1\") = v1 , _[\"nome2\"] = v2);\n{Rcpp} – DataFrame\nEm {Rcpp}, objetos DataFrame também são implementados como uma espécie de espécie de Vector. Em outras palavras, Vector é um vetor cujos elementos são valores escalares e DataFrame é um vetor cujos elementos são Vector. Portanto, DataFrame tem muitas funcionalidades em comum com Vector.\nDataFrame::create() é usado para criar um objeto DataFrame. Além disso, use Named() ou _[] se desejar especificar os nomes das colunas ao criar o objeto DataFrame:\n// Criação de um objeto DataFrame df dos vetores v1, v2\nDataFrame df = DataFrame::create(v1, v2);\n\n// Criação atribuindo nomes às colunas de DataFrame df\nDataFrame df = DataFrame::create( Named(\"V1\") = v1 , _[\"V2\"] = v2 );\nExemplo – Multiplicação de Matrizes\nEstá na hora de colocarmos o que vimos em prática. Nesse caso vamos comparar multiplicar duas matrizes usando o R (operador %*%) e usando o C++ com {Rcpp}.\n\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericVector mat_mul(const NumericVector& A, const NumericVector& B) {\n  NumericVector C = A * B;\n  \n  // dimensões para Vector virar Matrix no R\n  double dim = sqrt(A.length());\n  C.attr(\"dim\") = Dimension(dim, dim);\n  \n  return C;\n}\n\n\n\nn <- 10^3\nX <- matrix(rnorm(n * n), nrow = n)\n\nbench::mark(\n  R = X %*% X,\n  Cpp = mat_mul(X, X),\n  check = FALSE\n)\n\n\n# A tibble: 2 x 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 R          692.03ms 692.03ms      1.45    7.63MB       0 \n2 Cpp          1.17ms   1.23ms    596.      7.63MB     151.\n\nSucesso! Ganho de 700x para uma matriz de tamanho 1.000 x 1.000!\nUsando a biblioteca padrão C++11 STL no {Rcpp}\n{Rcpp} e Rmarkdown\nUsar {Rcpp} no seu pacote R\nMateriais Adicionais de Consulta\nDiversos materiais me ajudaram a aprender e criar esse conjunto de tutoriais de {Rcpp}:\nLivro Seamless R and C++ Integration with Rcpp do criador do ecossitema {Rcpp} Dirk Eddelbuettel\nCapítulo 25 – Rewriting R code in C++ do livro Advanced R do Hadley Wickham\nGaleria de exemplos de {Rcpp}\nLivro Rcpp for Everyone do Masaki E. Tsuda\nDocumentação Não-Oficial de {Rcpp} do James Balamuta (também conhecido como TheCoatlessProfessor)\nVídeo do Dirk Eddelbuettel na conferência useR! 2020 sobre {Rcpp}\n\ntem também o evalCpp() mas não vou cobrir aqui↩︎\nlembrando que C++ os índices começam em zero: então o primeiro elemento é Vector[0].↩︎\nquem conhece C++, em especial a C++11 STL, pode ver que muitos métodos de Vector são iguais à std::vector.↩︎\n",
      "last_modified": "2021-01-09T11:45:08-03:00"
    },
    {
      "path": "3-RcppEigen_RcppArmadillo.html",
      "title": "About this site",
      "description": "Some additional details about the website\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\n\n\n\n\n",
      "last_modified": "2021-01-09T11:39:09-03:00"
    },
    {
      "path": "4-RcppParallel.html",
      "title": "About this site",
      "description": "Some additional details about the website\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\n\n\n\n\n",
      "last_modified": "2021-01-09T11:39:09-03:00"
    },
    {
      "path": "5-cpp11.html",
      "title": "About this site",
      "description": "Some additional details about the website\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\n\n\n\n\n",
      "last_modified": "2021-01-09T11:39:10-03:00"
    },
    {
      "path": "index.html",
      "title": "Rcpp - A interface entre R e C++",
      "description": "Como fazer seu código R ficar mais rápido com Rcpp\n",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "February 2, 2021",
      "contents": "\n\nContents\nÍndice\nComo Configurar um Ambiente para {Rcpp}\nPacotes do ecossistema R + C++\nLicença\n\n\n\n\nOk, você quer fazer o seu código R rodar mais rápido? Já pensou em colocar partes do seu código em C++?\n\n\n\nÍndice\nPor que C++? R não é suficiente?\nComo incorporar C++ no R – {Rcpp}\nManipulação de Matrizes – {RcppEigen} e {RcppArmadillo}\nParalelização – {RcppParallel}\n{cpp11} – Nova Interface do pessoal do RStudio\nComo Configurar um Ambiente para {Rcpp}\nClaro, que primeiro você deve instalar o R pelo CRAN.\nLinux: Instale a versão desenvolvedor do R com sudo apt-get install r-base-dev ou similar\nMacOS: Instale o Xcode da App Store e execute o comando xcode-select --install para instalar o Xcode Command Line Tools\nWindows: Instale o Rtools\nPacotes do ecossistema R + C++\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#wmmumwqjmu .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wmmumwqjmu .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wmmumwqjmu .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wmmumwqjmu .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wmmumwqjmu .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wmmumwqjmu .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wmmumwqjmu .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wmmumwqjmu .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wmmumwqjmu .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wmmumwqjmu .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wmmumwqjmu .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wmmumwqjmu .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wmmumwqjmu .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#wmmumwqjmu .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wmmumwqjmu .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wmmumwqjmu .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wmmumwqjmu .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#wmmumwqjmu .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wmmumwqjmu .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#wmmumwqjmu .gt_left {\n  text-align: left;\n}\n\n#wmmumwqjmu .gt_center {\n  text-align: center;\n}\n\n#wmmumwqjmu .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wmmumwqjmu .gt_font_normal {\n  font-weight: normal;\n}\n\n#wmmumwqjmu .gt_font_bold {\n  font-weight: bold;\n}\n\n#wmmumwqjmu .gt_font_italic {\n  font-style: italic;\n}\n\n#wmmumwqjmu .gt_super {\n  font-size: 65%;\n}\n\n#wmmumwqjmu .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nTotal de Downloads do CRAN\n    \n    Pacote\n      Total de Downloads1\n      Links Reversos2,3\n    Rcpp\n\n      41,39M\n      2.312\n    BH\n\n      23,34M\n      259\n    RcppArmadillo\n\n      13,27M\n      846\n    RcppEigen\n\n      10,95M\n      286\n    cpp11\n\n      3,74M\n      9\n    RcppParallel\n\n      2,14M\n      82\n    \n        \n          1\n          \n           \n          Downloads entre 01/01/2016 e 31/12/2020.\n          \n        \n          2\n          \n           \n          Link reverso ocorre quando um pacote depende do código em C/C++ de outro.\n          \n        \n          3\n          \n           \n          Total em 09/01/2021.\n          \n      \n    \n\nLicença\nEste obra está licenciado com uma Licença Creative Commons Atribuição-CompartilhaIgual 4.0 Internacional.\n\n\n\n\n",
      "last_modified": "2021-01-09T11:39:22-03:00"
    },
    {
      "path": "Tutorial_Rcpp.html",
      "author": [],
      "contents": "\n* Rcpp C+ 11 STL\n    * std::transforme_reduce (https://cpptrivia.blogspot.com/2017/11/c17-stdtransformreduce.html)\n    * GCD e LCM https://gallery.rcpp.org/articles/a-first-boost-example/\n* Usando Rcpp no Rmarkdown\n* Usando Rcpp num Pacote - https://adv-r.hadley.nz/rcpp.html#rcpp-package\nManipulação de Matrizes – RcppEigen e RcppArmadillo\nPreferência pelo Eigen\nExemplo do Fastlm de https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf\nSparse Matrix Slide 143 http://dirk.eddelbuettel.com/papers/useR2018_rcpp_tutorial.pdf\n\nRcppParallel – Paralelização\ncpp11 – Nova Interface do pessoal do RStudio https://cran.r-project.org/web/packages/cpp11/vignettes/converting.html\nReferences https://teuder.github.io/rcpp4everyone_en/ http://dirk.eddelbuettel.com/code/rcpp.html https://thecoatlessprofessor.com/programming/cpp/unofficial-rcpp-api-documentation/\nDeletar esse Tutorial_Rcpp.md Fazer README.md e colocar no exclude GitHub Pages com https\n\n\n",
      "last_modified": "2021-01-09T11:39:22-03:00"
    }
  ],
  "collections": []
}
